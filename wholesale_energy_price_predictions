{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7172e1be",
   "metadata": {},
   "source": [
    "# Predicting Wholesale Energy Prices in Spain\n",
    "## Forecasting the Power of Tomorrow with Facebook Prophet\n",
    "\n",
    "Welcome to an exciting journey into the world of energy market dynamics and predictive analytics! In this Jupyter notebook, we delve into the intricate realm of Spain's wholesale energy prices, where the challenge lies in deciphering the complex interplay of factors that shape the energy market.\n",
    "\n",
    "**In a prolonged period of fluctuating energy prices, who knows what wholesale energy prices will be in the future?**\n",
    "\n",
    "...hopefully us...\n",
    "\n",
    "From households to industries, energy plays a pivotal role in our daily lives and economic sustainability. Predicting energy prices is not just a technical exercise; it's a mission-critical endeavor for policymakers, businesses, and individuals who depend on an efficient and cost-effective energy supply.\n",
    "\n",
    "In this project, we set out to unlock the secrets hidden within the data and provide insights that can empower better decision-making. Our primary objective is to create a robust model capable of forecasting wholesale energy prices in Spain for the next 3, 6, 9, and 12 months.\n",
    "\n",
    "## The Challenge Ahead\n",
    "The energy market is a dynamic ecosystem influenced by a multitude of factors, including weather patterns, oil and gas prices, supply and demand fluctuations, and more. Navigating this complexity is both a challenge and an opportunity. By harnessing the power of data and predictive analytics, we aim to unveil patterns, trends, and correlations that can shed light on the future of energy prices in Spain.\n",
    "\n",
    "**Introducing Facebook Prophet: Your Predictive Partner**\n",
    "In our quest to predict energy prices, we'll be harnessing the forecasting capabilities of the Facebook Prophet model. Prophet is a powerful time series forecasting tool that can capture daily seasonality, holiday effects, and other intricacies in your data. It's the perfect companion for unraveling the mysteries of wholesale energy prices.\n",
    "\n",
    "Our journey will encompass several key steps:\n",
    "- Data collection: Gathering historical energy price data and relevant features.\n",
    "- Data preprocessing: Cleaning, transforming, and preparing the data for analysis.\n",
    "- Feature engineering: Selecting and creating relevant features for our predictive model.\n",
    "- Model selection and training: Leveraging the predictive prowess of Facebook Prophet.\n",
    "- Evaluation and interpretation: Assessing the model's performance and deriving actionable insights.\n",
    "\n",
    "By the end of this notebook, you'll gain a deeper understanding of the intricacies of energy markets and the ability to anticipate the power of tomorrow.\n",
    "\n",
    "Let's get started!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8d131267",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/patrickevans29/.pyenv/versions/3.10.6/envs/lewagon/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.17.3 and <1.25.0 is required for this version of SciPy (detected version 1.26.1\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from prophet import Prophet\n",
    "from prophet.diagnostics import cross_validation, performance_metrics\n",
    "from prophet.plot import plot_cross_validation_metric, plot_cross_validation_metric\n",
    "import re\n",
    "import seaborn as sns\n",
    "import itertools\n",
    "import requests\n",
    "import datetime\n",
    "import time\n",
    "from itertools import chain, combinations\n",
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e216f69a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Año</th>\n",
       "      <th>Periodo</th>\n",
       "      <th>Precio de la luz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022</td>\n",
       "      <td>2022</td>\n",
       "      <td>122,63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022</td>\n",
       "      <td>Día 2 de enero</td>\n",
       "      <td>136,97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>Día 3 de enero</td>\n",
       "      <td>150,5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022</td>\n",
       "      <td>Día 4 de enero</td>\n",
       "      <td>152,47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022</td>\n",
       "      <td>Día 5 de enero</td>\n",
       "      <td>180,99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Año         Periodo Precio de la luz\n",
       "0  2022            2022           122,63\n",
       "1  2022  Día 2 de enero           136,97\n",
       "2  2022  Día 3 de enero            150,5\n",
       "3  2022  Día 4 de enero           152,47\n",
       "4  2022  Día 5 de enero           180,99"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First we will access the energy prices from the last two years from epdata.es\n",
    "df = pd.read_csv(\"evolucion_diaria_del_precio_de_la_luz_en_el_mercado_mayorista_español.csv\", sep=';')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30af66c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Año                 0.606980\n",
       "Periodo             2.157165\n",
       "Precio de la luz    2.157165\n",
       "dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can start by checking the % of NAN values there are\n",
    "df.isna().sum()/df.count()*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ab610360",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Given the low % of NANs we can drop them\n",
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8f2f9b3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Año                 1\n",
      "Periodo             1\n",
      "Precio de la luz    1\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# There is a rogue value where the 'periodo' column includes a year instead of a data. So we can drop that. \n",
    "print(df[df['Periodo'] == '2022'].count())\n",
    "df.drop(df[df['Periodo'] == '2022'].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "05d79666",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need to convert the 'año' and 'periodo' columns into datatime format\n",
    "\n",
    "# Define a dictionary to map month names to numeric values\n",
    "month_mapping = {\n",
    "    'enero': '01',\n",
    "    'febrero': '02',\n",
    "    'marzo': '03',\n",
    "    'abril': '04',\n",
    "    'mayo': '05',\n",
    "    'junio': '06',\n",
    "    'julio': '07',\n",
    "    'agosto': '08',\n",
    "    'septiembre': '09',\n",
    "    'octubre': '10',\n",
    "    'noviembre': '11',\n",
    "    'diciembre': '12'\n",
    "}\n",
    "\n",
    "# Extract year, day, and month from \"Periodo\" column\n",
    "df['Day'] = df['Periodo'].str.extract(r'Día (\\d+)', expand=False)\n",
    "df['Month'] = df['Periodo'].str.extract(r'de (\\w+)', expand=False)\n",
    "\n",
    "# Map month names to numeric values using the dictionary\n",
    "df['Month'] = df['Month'].str.lower().map(month_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "96c42b56",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/patrickevans29/.pyenv/versions/3.10.6/envs/lewagon/lib/python3.10/site-packages/pandas/core/tools/datetimes.py:1229: RuntimeWarning: invalid value encountered in cast\n",
      "  masked_result = calc(carg[mask].astype(np.float64).astype(np.int64))\n"
     ]
    }
   ],
   "source": [
    "# Combine 'Año', 'Month', and 'Day' columns to create a 'Date' column\n",
    "df['Date'] = pd.to_datetime(df['Año'].astype(str) + df['Month'] + df['Day'], format='%Y%m%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd424912",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new dataframe that uses the correct terminology for the prophet model\n",
    "prophet_df = df[['Date', 'Precio de la luz']]\n",
    "prophet_df = prophet_df.rename(columns={'Date': 'ds', 'Precio de la luz': 'y'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8721fbf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace the comma with a decimal point and convert to float\n",
    "prophet_df['y'] = prophet_df['y'].str.replace(',', '.').astype(float)\n",
    "prophet_df = prophet_df.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecd9622b",
   "metadata": {},
   "source": [
    "**Lets have a look at the data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "15299732",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set the style for the plot (optional but makes the plot look nicer)\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a line plot using Seaborn\n",
    "plt.figure(figsize=(15, 8))  # Adjust the figure size as needed\n",
    "sns.lineplot(x='ds', y='y', data=prophet_df)\n",
    "\n",
    "# Customize plot labels and title\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price of electricity (€/MWh)')\n",
    "plt.title('Wholesale Energy Price Over Time')\n",
    "\n",
    "# Show the plot\n",
    "plt.xticks(rotation=45) \n",
    "plt.tight_layout()\n",
    "\n",
    "# Specify the file path and format for saving the image\n",
    "plt.savefig('energy_price_plot.png')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b55fed9",
   "metadata": {},
   "source": [
    "*As the graph shows there was a slow decline in prices until around April of 2023, since then they have been rising steadily*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82b41a47",
   "metadata": {},
   "source": [
    "**Create a baseline model - A prophet model with no regressors**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "01eec7e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "15:36:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "15:36:59 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<prophet.forecaster.Prophet at 0x1245eded0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize the Prophet model\n",
    "model = Prophet()\n",
    "\n",
    "# Fit the model to the data\n",
    "model.fit(prophet_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5a9982ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:05:26 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:05:27 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE when using default hyperparametres: 0.359\n",
      "MAE when using default hyperparametres: 29.558\n"
     ]
    }
   ],
   "source": [
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, rolling_window=1)\n",
    "\n",
    "# Get the MAPE value\n",
    "mape = df_p['mape'].mean()\n",
    "\n",
    "# Get MAE\n",
    "mae = df_p['mae'].mean()\n",
    "\n",
    "# Print the MAPE\n",
    "print(f\"MAPE when using default hyperparametres: {round(mape, 3)}\")\n",
    "print(f\"MAE when using default hyperparametres: {round(mae, 3)}\")\n",
    "\n",
    "# Save theses MAPE and MAE score for comparison against later models. We will be using MAPE as the main metric to compare. \n",
    "best_mape = mape\n",
    "best_mae = mae"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b6faa05",
   "metadata": {},
   "source": [
    "**To tune the hyperparametres of the Prophet model we can cross-validate it with different changepoints and seasonality figures**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1218711d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:07:31 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:31 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:34 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:34 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:34 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:50 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:50 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:55 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:55 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:07:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:04 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:10 - cmdstanpy - INFO - Chain [1] start processing\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:08:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:13 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:18 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:22 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:22 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:22 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:22 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:22 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:23 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:28 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:41 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:42 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:42 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:42 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:42 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:42 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:47 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:47 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:47 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:47 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:47 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:51 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:52 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:52 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:08:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:00 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:01 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:05 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:06 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:06 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:06 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:11 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:11 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:15 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:20 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:24 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:25 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:25 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:28 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:29 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:46 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:46 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:56 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:09:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:09:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:11 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:18 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:19 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:23 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:24 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:25 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:33 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:37 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:10:38 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    changepoint_prior_scale  seasonality_prior_scale seasonality_mode  \\\n",
      "0                      0.15                     10.3         additive   \n",
      "1                      0.15                     10.3         additive   \n",
      "2                      0.15                     10.3         additive   \n",
      "3                      0.15                     10.3         additive   \n",
      "4                      0.15                     10.3   multiplicative   \n",
      "5                      0.15                     10.3   multiplicative   \n",
      "6                      0.15                     10.3   multiplicative   \n",
      "7                      0.15                     10.3   multiplicative   \n",
      "8                      0.15                     10.0         additive   \n",
      "9                      0.15                     10.0         additive   \n",
      "10                     0.15                     10.0         additive   \n",
      "11                     0.15                     10.0         additive   \n",
      "12                     0.15                     10.0   multiplicative   \n",
      "13                     0.15                     10.0   multiplicative   \n",
      "14                     0.15                     10.0   multiplicative   \n",
      "15                     0.15                     10.0   multiplicative   \n",
      "16                     0.10                     10.3         additive   \n",
      "17                     0.10                     10.3         additive   \n",
      "18                     0.10                     10.3         additive   \n",
      "19                     0.10                     10.3         additive   \n",
      "20                     0.10                     10.3   multiplicative   \n",
      "21                     0.10                     10.3   multiplicative   \n",
      "22                     0.10                     10.3   multiplicative   \n",
      "23                     0.10                     10.3   multiplicative   \n",
      "24                     0.10                     10.0         additive   \n",
      "25                     0.10                     10.0         additive   \n",
      "26                     0.10                     10.0         additive   \n",
      "27                     0.10                     10.0         additive   \n",
      "28                     0.10                     10.0   multiplicative   \n",
      "29                     0.10                     10.0   multiplicative   \n",
      "30                     0.10                     10.0   multiplicative   \n",
      "31                     0.10                     10.0   multiplicative   \n",
      "\n",
      "    yearly_seasonality  weekly_seasonality      mape  \n",
      "0                False                True  0.377046  \n",
      "1                False               False  0.407992  \n",
      "2                 True                True  0.738229  \n",
      "3                 True               False  0.732286  \n",
      "4                False                True  0.386791  \n",
      "5                False               False  0.407992  \n",
      "6                 True                True  0.511173  \n",
      "7                 True               False  0.520582  \n",
      "8                False                True  0.377761  \n",
      "9                False               False  0.407992  \n",
      "10                True                True  0.777709  \n",
      "11                True               False  0.749817  \n",
      "12               False                True  0.384824  \n",
      "13               False               False  0.407992  \n",
      "14                True                True  0.483518  \n",
      "15                True               False  0.501589  \n",
      "16               False                True  0.367948  \n",
      "17               False               False  0.400646  \n",
      "18                True                True  0.667182  \n",
      "19                True               False  0.629683  \n",
      "20               False                True  0.380620  \n",
      "21               False               False  0.400646  \n",
      "22                True                True  0.463133  \n",
      "23                True               False  0.432354  \n",
      "24               False                True  0.366807  \n",
      "25               False               False  0.400646  \n",
      "26                True                True  0.645429  \n",
      "27                True               False  0.633744  \n",
      "28               False                True  0.382424  \n",
      "29               False               False  0.400646  \n",
      "30                True                True  0.443103  \n",
      "31                True               False  0.454706  \n",
      "Best Parameters: changepoint_prior_scale         0.1\n",
      "seasonality_prior_scale        10.0\n",
      "seasonality_mode           additive\n",
      "yearly_seasonality            False\n",
      "weekly_seasonality             True\n",
      "mape                       0.366807\n",
      "Name: 24, dtype: object\n"
     ]
    }
   ],
   "source": [
    "import itertools\n",
    "\n",
    "param_grid = {  \n",
    "    'changepoint_prior_scale': [0.15, 0.1],\n",
    "    'seasonality_prior_scale': [10.3, 10.0],\n",
    "    'seasonality_mode': ['additive', 'multiplicative'], \n",
    "    'yearly_seasonality': [False, True],  \n",
    "    'weekly_seasonality': [True, False]\n",
    "}\n",
    "\n",
    "# Generate all combinations of parameters\n",
    "all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\n",
    "mapes = [] \n",
    "maes = []\n",
    "\n",
    "# Use cross-validation to evaluate all parameters\n",
    "for params in all_params:\n",
    "    m = Prophet(**params).fit(prophet_df) \n",
    "    df_cv = cross_validation(m, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "    df_p = performance_metrics(df_cv, metrics=['mape'], rolling_window=1)\n",
    "    mapes.append(df_p['mape'].mean())\n",
    "\n",
    "# Find the best parameters\n",
    "tuning_results = pd.DataFrame(all_params)\n",
    "tuning_results['mape'] = mapes\n",
    "print(tuning_results)\n",
    "\n",
    "# Find the parameters with the lowest MAPE\n",
    "best_params = tuning_results.loc[tuning_results['mape'].idxmin()]\n",
    "print(\"Best Parameters:\", best_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c12be677",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add the best params as different variables\n",
    "best_changepoint_prior_scale = best_params['changepoint_prior_scale']\n",
    "best_seasonality_prior_scale = best_params['seasonality_prior_scale']\n",
    "best_seasonality_mode = best_params['seasonality_mode']\n",
    "best_yearly_seasonality = best_params['yearly_seasonality']\n",
    "best_weekly_seasonality = best_params['weekly_seasonality']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "169d8571",
   "metadata": {},
   "source": [
    "Here we can see that mape improved to 0.43. We will set the changepoint_prior_scale and the seasonality_prior_scale to the best results that our grid search found for later models. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35f30012",
   "metadata": {},
   "source": [
    "**Include temperatures. We will get this data from the AEMET website. They provide an API to access weather information from various radar points accross Spain. I have chosen to take the readings from Madrid's Barajas Airport**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7943eb46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded from CSV file.\n"
     ]
    }
   ],
   "source": [
    "# Load data from the CSV file if available\n",
    "try:\n",
    "    max_temp_data = pd.read_csv('max_temp_data.csv')\n",
    "    print(\"Data loaded from CSV file.\")\n",
    "    \n",
    "# If not we'll get it from the API\n",
    "except FileNotFoundError:\n",
    "    print(\"CSV file not found. Making API request...\") \n",
    "    # We're going to get the data from AEMET's API\n",
    "    api_key = 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJwYXRyaWNrZXZhbnMyOUBnbWFpbC5jb20iLCJqdGkiOiJmNWUyYTE2ZC05YWFkLTRjZTUtYjA0Mi0yOTM0NTdlNGQ4ZDciLCJpc3MiOiJBRU1FVCIsImlhdCI6MTY5NzQ2MzMxNiwidXNlcklkIjoiZjVlMmExNmQtOWFhZC00Y2U1LWIwNDItMjkzNDU3ZTRkOGQ3Iiwicm9sZSI6IiJ9.dyzaO44Tp4-s6qi6gKVsBJu-eq8DIFcHWS5PtXer52U'\n",
    "\n",
    "    # Define the start and end dates\n",
    "    start_date = datetime.date(2022, 1, 2)\n",
    "    end_date = datetime.date(2023, 10, 14)\n",
    "\n",
    "    # Create an empty list to store the data\n",
    "    all_weather_data = []\n",
    "\n",
    "    # Iterate through dates in the specified range\n",
    "    current_date = start_date\n",
    "    current_date = start_date\n",
    "\n",
    "    while current_date <= end_date:\n",
    "        formatted_date = current_date.strftime(\"%Y-%m-%d\")\n",
    "\n",
    "        url = f'https://opendata.aemet.es/opendata/api/valores/climatologicos/diarios/datos/fechaini/{formatted_date}T00%3A00%3A00UTC/fechafin/{formatted_date}T23%3A59%3A59UTC/estacion/3129/?api_key={api_key}'\n",
    "\n",
    "        while True:\n",
    "            response = requests.get(url)\n",
    "\n",
    "            if response.status_code == 429:\n",
    "\n",
    "                wait_time = 30  # Wait for one minute\n",
    "                print(f\"Rate limited. Waiting for {wait_time} seconds and retrying...\")\n",
    "                time.sleep(wait_time)\n",
    "                continue \n",
    "\n",
    "            if response.status_code == 200:\n",
    "                data_url = response.json().get('datos')\n",
    "                if data_url:\n",
    "                    response = requests.get(data_url)\n",
    "                    if response.status_code == 200:\n",
    "                        weather_data = response.json()\n",
    "                        all_weather_data.append(weather_data)\n",
    "                        print(f\"Data retrieved for {formatted_date}\")\n",
    "                    else:\n",
    "                        print(f\"Failed to fetch data for {formatted_date}: {response.status_code}\")\n",
    "                else:\n",
    "                    print(f\"Data URL not found for {formatted_date}\")\n",
    "            else:\n",
    "                print(f\"API request failed for {formatted_date}: {response.status_code}\")\n",
    "\n",
    "            break  # Break out of the retry loop if the request is successful\n",
    "\n",
    "        current_date += datetime.timedelta(days=1)\n",
    "        \n",
    "        temperatures = {}\n",
    "\n",
    "    # Go through the dataframe and select the date and max temperature for each day\n",
    "    for sublist in all_weather_data:\n",
    "        for day in sublist:\n",
    "            date = day['fecha']\n",
    "            temp = day['tmax']\n",
    "            temperatures[date] = temp\n",
    "    \n",
    "    # Save it to a dataframe for merging\n",
    "    temps = pd.DataFrame(list(temperatures.items()), columns=['ds', 'max_temp'])\n",
    "    \n",
    "    # Change temps.ds to datetime and merge with prophet_df\n",
    "    temps['ds'] =  pd.to_datetime(temps['ds'], format='%Y-%m-%d')\n",
    "    prophet_df = prophet_df.merge(temps, on=\"ds\", how=\"inner\")\n",
    "    \n",
    "    # Save the data to a csv file because it takes ages to use the API\n",
    "    # Create a new DataFrame with just the 'ds' and 'max_temp' columns\n",
    "    max_temp_data = temps[['ds', 'max_temp']]\n",
    "\n",
    "    # Save the DataFrame to a CSV file\n",
    "    max_temp_data.to_csv('max_temp_data.csv', index=False)\n",
    "    \n",
    "max_temp_data['ds'] =  pd.to_datetime(max_temp_data['ds'], format='%Y-%m-%d')\n",
    "prophet_df = prophet_df.merge(max_temp_data, on=\"ds\", how=\"inner\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "95a7bb94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>y</th>\n",
       "      <th>max_temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-01-02</td>\n",
       "      <td>136.97</td>\n",
       "      <td>14.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-01-03</td>\n",
       "      <td>150.50</td>\n",
       "      <td>14.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-01-04</td>\n",
       "      <td>152.47</td>\n",
       "      <td>12.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-01-05</td>\n",
       "      <td>180.99</td>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-01-06</td>\n",
       "      <td>212.98</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ds       y  max_temp\n",
       "0 2022-01-02  136.97      14.5\n",
       "1 2022-01-03  150.50      14.5\n",
       "2 2022-01-04  152.47      12.8\n",
       "3 2022-01-05  180.99      10.1\n",
       "4 2022-01-06  212.98       8.5"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prophet_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "364757ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:18:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:45 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:18:49 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE: 0.373\n",
      "MAE: 29.869\n",
      "Current Best MAPE: 0.359\n",
      "Current Best MAE: 29.558\n"
     ]
    }
   ],
   "source": [
    "# Add the new max_temp regressor and make a new model\n",
    "param_grid = {  \n",
    "    'changepoint_prior_scale': best_changepoint_prior_scale,\n",
    "    'seasonality_prior_scale': best_seasonality_prior_scale,\n",
    "    'seasonality_mode': best_seasonality_mode, \n",
    "    'yearly_seasonality': best_yearly_seasonality,  \n",
    "    'weekly_seasonality': best_weekly_seasonality\n",
    "}\n",
    "\n",
    "# Define a list of all regressors to include\n",
    "all_regressors = ['max_temp']\n",
    "\n",
    "# Initialize Prophet model\n",
    "model = Prophet(**param_grid)\n",
    "\n",
    "# Add all regressors to the model\n",
    "for regressor in all_regressors:\n",
    "    model.add_regressor(regressor)\n",
    "\n",
    "# Fit the model with the data\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, rolling_window=1)\n",
    "\n",
    "# Get the MAPE value\n",
    "mape = df_p['mape'].mean()\n",
    "\n",
    "# Get the MAE value\n",
    "mae = df_p['mae'].mean()\n",
    "\n",
    "# Print the MAPE\n",
    "print(f\"MAPE: {round(mape, 3)}\")\n",
    "print(f\"MAE: {round(mae, 3)}\")\n",
    "print(f'Current Best MAPE: {round(best_mape, 3)}')\n",
    "print(f'Current Best MAE: {round(best_mae, 3)}')\n",
    "      \n",
    "# If the new mape and mae are better when replace the best variables\n",
    "if mape < best_mape:\n",
    "    best_mape=mape\n",
    "if mae < best_mae:\n",
    "    best_mae=mae"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "904dcd99",
   "metadata": {},
   "source": [
    "**Add oil prices. Oil accounted for 46% of Spains total consumption of energy in 2022, so global oil prices should be expected to affect wholesale energy prices.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3ef124cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "# Get the data from Yahoo finance\n",
    "oil = \"CL=F\"\n",
    "start = \"2022-01-02\"\n",
    "end = \"2023-10-12\"\n",
    "\n",
    "# download the stock data\n",
    "oil_data = yf.download(oil, start=start, end=end)\n",
    "oil_close = oil_data['Close']\n",
    "oil_close = oil_close.reset_index()\n",
    "oil_close = oil_close.rename(columns={\"Date\": \"ds\", \"Close\": \"Oil\"})\n",
    "# Merge the two DataFrames on the \"ds\" column\n",
    "prophet_df = prophet_df.merge(oil_close, on=\"ds\", how=\"inner\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c262bf4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new feature that is oil prices lagged by one day and one week\n",
    "prophet_df['Oil_Lag_1'] = prophet_df['Oil'].shift(1)\n",
    "prophet_df['Oil_Lag_7'] = prophet_df['Oil'].shift(7)\n",
    "\n",
    "# Drop any rows with NaN values (since the first row will have a NaN due to the lag)\n",
    "prophet_df = prophet_df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f9dff006",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:20:54 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:54 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:20:59 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE: 0.3\n",
      "MAE: 24.825\n",
      "Current Best MAPE: 0.305\n",
      "Current Best MAE: 25.893\n"
     ]
    }
   ],
   "source": [
    "# Train and validate a new model including the price of oil\n",
    "# Add the new max_temp regressor and make a new model\n",
    "# Define a list of all regressors to include\n",
    "all_regressors = ['max_temp', 'Oil', 'Oil_Lag_1', 'Oil_Lag_7']\n",
    "\n",
    "# Initialize Prophet model\n",
    "model = Prophet(**param_grid)\n",
    "\n",
    "# Add all regressors to the model\n",
    "for regressor in all_regressors:\n",
    "    model.add_regressor(regressor)\n",
    "\n",
    "# Fit the model with the data\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, rolling_window=1)\n",
    "\n",
    "# Get the MAPE value\n",
    "mape = df_p['mape'].mean()\n",
    "\n",
    "# Get the MAE value\n",
    "mae = df_p['mae'].mean()\n",
    "\n",
    "# Print the MAPE\n",
    "print(f\"MAPE: {round(mape, 3)}\")\n",
    "print(f\"MAE: {round(mae, 3)}\")\n",
    "print(f'Current Best MAPE: {round(best_mape, 3)}')\n",
    "print(f'Current Best MAE: {round(best_mae, 3)}')\n",
    "      \n",
    "# If the new mape and mae are better when replace the best variables\n",
    "if mape < best_mape:\n",
    "    best_mape=mape\n",
    "if mae < best_mae:\n",
    "    best_mae=mae"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c49d1d15",
   "metadata": {},
   "source": [
    "**Add Natural Gas prices. Natural gas accounted for 20% of Spain's energy consumption, so this should also provide insight, albeit less than oil.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "063bd334",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "# Get the data from yfinance\n",
    "gas = \"NG=F\"\n",
    "\n",
    "# download the stock data\n",
    "gas_data = yf.download(gas, start, end)\n",
    "# Isolate just the close data and change the column names\n",
    "gas_close = gas_data['Close'].reset_index().rename(columns={\"Date\": \"ds\", \"Close\": \"NG\"})\n",
    "# Merge with prophet\n",
    "prophet_df = pd.merge(prophet_df, gas_close, on='ds', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "093e41f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new feature that is NG prices lagged by one day\n",
    "prophet_df['NG_Lag_1'] = prophet_df[\"NG\"].shift(1)\n",
    "prophet_df['NG_Lag_7'] = prophet_df[\"NG\"].shift(7)\n",
    "\n",
    "# Drop any rows with NaN values (since the first row will have a NaN due to the lag)\n",
    "prophet_df = prophet_df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7b609377",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:23:27 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:27 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:31 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:23:32 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE: 0.307\n",
      "MAE: 25.729\n",
      "Current Best MAPE: 0.3\n",
      "Current Best MAE: 24.825\n"
     ]
    }
   ],
   "source": [
    "# Train and validate a new model including the price of natural gas\n",
    "# Add the new max_temp regressor and make a new model\n",
    "# Define a list of all regressors to include\n",
    "all_regressors = ['max_temp', 'Oil', 'Oil_Lag_1', 'Oil_Lag_7', 'NG', 'NG_Lag_1', 'NG_Lag_7']\n",
    "\n",
    "# Initialize Prophet model\n",
    "model = Prophet(**param_grid)\n",
    "\n",
    "# Add all regressors to the model\n",
    "for regressor in all_regressors:\n",
    "    model.add_regressor(regressor)\n",
    "\n",
    "# Fit the model with the data\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, rolling_window=1)\n",
    "\n",
    "# Get the MAPE value\n",
    "mape = df_p['mape'].mean()\n",
    "\n",
    "# Get the MAE value\n",
    "mae = df_p['mae'].mean()\n",
    "\n",
    "# Print the MAPE\n",
    "print(f\"MAPE: {round(mape, 3)}\")\n",
    "print(f\"MAE: {round(mae, 3)}\")\n",
    "print(f'Current Best MAPE: {round(best_mape, 3)}')\n",
    "print(f'Current Best MAE: {round(best_mae, 3)}')\n",
    "      \n",
    "# If the new mape and mae are better when replace the best variables\n",
    "if mape < best_mape:\n",
    "    best_mape=mape\n",
    "if mae < best_mae:\n",
    "    best_mae=mae"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe31bc85",
   "metadata": {},
   "source": [
    "**Get the EURUSD rate from yfinance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0828b64a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%%**********************]  1 of 1 completed\n"
     ]
    }
   ],
   "source": [
    "# Get the data from yfinance\n",
    "euro = \"EURUSD=X\"\n",
    "\n",
    "# download the stock data\n",
    "euro_data = yf.download(euro, start, end)\n",
    "# Isolate just the close data and change the column names\n",
    "euro_close = euro_data['Close'].reset_index().rename(columns={\"Date\": \"ds\", \"Close\": 'euro'})\n",
    "# Merge with prophet\n",
    "prophet_df = pd.merge(prophet_df, euro_close, on='ds', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "cba8ecb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ds</th>\n",
       "      <th>y</th>\n",
       "      <th>max_temp</th>\n",
       "      <th>Oil</th>\n",
       "      <th>Oil_Lag_1</th>\n",
       "      <th>Oil_Lag_7</th>\n",
       "      <th>NG</th>\n",
       "      <th>NG_Lag_1</th>\n",
       "      <th>NG_Lag_7</th>\n",
       "      <th>euro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-02-02</td>\n",
       "      <td>210.18</td>\n",
       "      <td>20.9</td>\n",
       "      <td>88.260002</td>\n",
       "      <td>88.199997</td>\n",
       "      <td>83.309998</td>\n",
       "      <td>5.501</td>\n",
       "      <td>4.751</td>\n",
       "      <td>4.027</td>\n",
       "      <td>1.127396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-02-03</td>\n",
       "      <td>207.89</td>\n",
       "      <td>17.8</td>\n",
       "      <td>90.269997</td>\n",
       "      <td>88.260002</td>\n",
       "      <td>85.599998</td>\n",
       "      <td>4.888</td>\n",
       "      <td>5.501</td>\n",
       "      <td>4.053</td>\n",
       "      <td>1.129995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-02-04</td>\n",
       "      <td>197.03</td>\n",
       "      <td>14.0</td>\n",
       "      <td>92.309998</td>\n",
       "      <td>90.269997</td>\n",
       "      <td>87.349998</td>\n",
       "      <td>4.572</td>\n",
       "      <td>4.888</td>\n",
       "      <td>4.277</td>\n",
       "      <td>1.143576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-02-07</td>\n",
       "      <td>206.46</td>\n",
       "      <td>18.2</td>\n",
       "      <td>91.320000</td>\n",
       "      <td>92.309998</td>\n",
       "      <td>86.610001</td>\n",
       "      <td>4.232</td>\n",
       "      <td>4.572</td>\n",
       "      <td>6.265</td>\n",
       "      <td>1.145515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-02-08</td>\n",
       "      <td>203.70</td>\n",
       "      <td>17.9</td>\n",
       "      <td>89.360001</td>\n",
       "      <td>91.320000</td>\n",
       "      <td>86.820000</td>\n",
       "      <td>4.248</td>\n",
       "      <td>4.232</td>\n",
       "      <td>4.639</td>\n",
       "      <td>1.144296</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ds       y  max_temp        Oil  Oil_Lag_1  Oil_Lag_7     NG  \\\n",
       "0 2022-02-02  210.18      20.9  88.260002  88.199997  83.309998  5.501   \n",
       "1 2022-02-03  207.89      17.8  90.269997  88.260002  85.599998  4.888   \n",
       "2 2022-02-04  197.03      14.0  92.309998  90.269997  87.349998  4.572   \n",
       "3 2022-02-07  206.46      18.2  91.320000  92.309998  86.610001  4.232   \n",
       "4 2022-02-08  203.70      17.9  89.360001  91.320000  86.820000  4.248   \n",
       "\n",
       "   NG_Lag_1  NG_Lag_7      euro  \n",
       "0     4.751     4.027  1.127396  \n",
       "1     5.501     4.053  1.129995  \n",
       "2     4.888     4.277  1.143576  \n",
       "3     4.572     6.265  1.145515  \n",
       "4     4.232     4.639  1.144296  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prophet_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "00d1a516",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:25:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:09 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:25:14 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAPE when using default hyperparametres: 0.317\n",
      "MAE when using default hyperparametres: 24.38\n",
      "Current Best MAPE: 0.3\n",
      "Current Best MAE: 24.825\n"
     ]
    }
   ],
   "source": [
    "# Train and validate a new model including the price of the Euro against the Dollar\n",
    "# Add the new max_temp regressor and make a new model\n",
    "# Define a list of all regressors to include\n",
    "all_regressors = ['max_temp', 'NG', 'euro', 'Oil', 'Oil_Lag_1', 'Oil_Lag_7', 'NG_Lag_1', 'NG_Lag_7']\n",
    "\n",
    "# Initialize Prophet model\n",
    "model = Prophet(**param_grid)\n",
    "\n",
    "# Add all regressors to the model\n",
    "for regressor in all_regressors:\n",
    "    model.add_regressor(regressor)\n",
    "\n",
    "# Fit the model with the data\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, metrics=['mape', 'mae'], rolling_window=1)\n",
    "\n",
    "# Get the MAPE value\n",
    "mape = df_p['mape'].mean()\n",
    "\n",
    "# Get the MAE value\n",
    "mae = df_p['mae'].mean()\n",
    "\n",
    "# Print the MAPE\n",
    "print(f\"MAPE when using default hyperparametres: {round(mape, 3)}\")\n",
    "print(f\"MAE when using default hyperparametres: {round(mae, 3)}\")\n",
    "print(f'Current Best MAPE: {round(best_mape, 3)}')\n",
    "print(f'Current Best MAE: {round(best_mae, 3)}')\n",
    "      \n",
    "# If the new mape and mae are better when replace the best variables\n",
    "if mape < best_mape:\n",
    "    best_mape=mape\n",
    "if mae < best_mae:\n",
    "    best_mae=mae"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dacfa99",
   "metadata": {},
   "source": [
    "**Check all regressors to find the best MAPE**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2566d5d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:30 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:30 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:35 - cmdstanpy - INFO - Chain [1] start processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline mape: 0.2960828035387879\n",
      "Modelling with: max_temp...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:36 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:39 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:40 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with max_temp is 0.2836685127193962\n",
      "Modelling with: NG...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:44 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with NG is 0.3027461430581813\n",
      "Modelling with: euro...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:48 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:49 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:49 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with euro is 0.27555978632747335\n",
      "Modelling with: Oil...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:52 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:52 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:52 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:52 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:52 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:52 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:53 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with Oil is 0.27800750168845567\n",
      "Modelling with: Oil_Lag_1...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:31:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:57 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:31:58 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with Oil_Lag_1 is 0.27736763127332464\n",
      "Modelling with: Oil_Lag_7...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:03 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with Oil_Lag_7 is 0.290503614044861\n",
      "Modelling with: NG_Lag_1...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:32:07 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:07 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:08 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with NG_Lag_1 is 0.3062948870669533\n",
      "Modelling with: NG_Lag_7...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:32:12 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The MAPE with NG_Lag_7 is 0.3190974036247141\n",
      "Best regressors: ['max_temp', 'euro', 'Oil', 'Oil_Lag_1', 'Oil_Lag_7']\n",
      "Lowest MAPE: 27.560000000000002 %\n"
     ]
    }
   ],
   "source": [
    "best_regressors = []\n",
    "# Get a baseline to get a score that each regressor much improve upon to be included\n",
    "model = Prophet(**param_grid)\n",
    "# Fit the model\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Perform cross-validation and compute MAPE\n",
    "df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "df_p = performance_metrics(df_cv, metrics=['mape'], rolling_window=1)\n",
    "baseline_mape = df_p['mape'].mean()\n",
    "print(f\"Baseline mape: {baseline_mape}\")\n",
    "\n",
    "for regressor in all_regressors:\n",
    "    # Initialize the Prophet model\n",
    "    model = Prophet(**param_grid)\n",
    "        \n",
    "    # Add the regressor\n",
    "    print(f'Modelling with: {regressor}...')\n",
    "    model.add_regressor(regressor)\n",
    "    \n",
    "    # Fit the model\n",
    "    model.fit(prophet_df)\n",
    "\n",
    "    # Perform cross-validation and compute MAPE\n",
    "    df_cv = cross_validation(model, initial='366 days', horizon='60 days', parallel=\"processes\")\n",
    "    df_p = performance_metrics(df_cv, metrics=['mape'], rolling_window=1)\n",
    "    reg_mape = df_p['mape'].mean()\n",
    "    print(f'The MAPE with {regressor} is {reg_mape}')\n",
    "\n",
    "    # Check if this regressor is lower than the baseline mape\n",
    "    if reg_mape < baseline_mape:\n",
    "        best_regressors.append(regressor)\n",
    "\n",
    "# Print the best combination of regressors and the corresponding MAPE\n",
    "print(\"Best regressors:\", best_regressors)\n",
    "print(\"Lowest MAPE:\", round(best_mape, 4) * 100, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "a82e879f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.27555978632747335\n",
      "24.380344574563935\n"
     ]
    }
   ],
   "source": [
    "print(best_mape)\n",
    "print(best_mae)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ea1e991",
   "metadata": {},
   "source": [
    "**Now that we have the best regressors we can make a prediction of the next 365 days**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f9be8e71",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:33:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:08 - cmdstanpy - INFO - Chain [1] done processing\n",
      "16:33:08 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:09 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ds', 'y'], dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:33:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:09 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ds', 'y'], dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:33:09 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:09 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ds', 'y'], dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:33:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:10 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ds', 'y'], dtype='object')\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "16:33:10 - cmdstanpy - INFO - Chain [1] start processing\n",
      "16:33:10 - cmdstanpy - INFO - Chain [1] done processing\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ds', 'y'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "## Initialize Prophet model\n",
    "model = Prophet(**param_grid)\n",
    "\n",
    "# Add all regressors to the model\n",
    "for regressor in best_regressors:\n",
    "    model.add_regressor(regressor)\n",
    "\n",
    "# Fit the model with the data\n",
    "model.fit(prophet_df)\n",
    "\n",
    "# Create a new dataframe with a date range for the next year\n",
    "future_df = model.make_future_dataframe(periods=365, freq='D')\n",
    "\n",
    "# Fill missing regressor values in the future_df DataFrame\n",
    "for regressor in best_regressors:\n",
    "    # Change the name of the regressor to 'y'\n",
    "    regressor_df = prophet_df[['ds', regressor]].rename(columns={regressor: 'y'})\n",
    "        \n",
    "    # Build the model for the regressor\n",
    "    regressor_model = Prophet(**param_grid)\n",
    "    \n",
    "    # Fit the new model\n",
    "    regressor_model.fit(regressor_df)\n",
    "    regressor_future = regressor_model.make_future_dataframe(periods=365, freq='D')\n",
    "    future_df[regressor] = regressor_model.predict(regressor_future).yhat\n",
    "    \n",
    "# Make predictions for the future dates\n",
    "forecast = model.predict(future_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "7cbee8f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Customize the plot\n",
    "fig, ax = plt.subplots(figsize=(15, 8))\n",
    "\n",
    "# Plot observed data from the original dataset\n",
    "ax.plot(prophet_df['ds'], prophet_df['y'], label='Observed', color='b')\n",
    "\n",
    "# Plot predicted values (yhat) as a line from the forecast\n",
    "ax.plot(forecast['ds'], forecast['yhat'], label='Predicted', color='g')\n",
    "\n",
    "# Shade the uncertainty interval\n",
    "ax.fill_between(forecast['ds'], forecast['yhat_lower'], forecast['yhat_upper'], color='lightgray', alpha=0.5, label='Uncertainty Interval')\n",
    "\n",
    "# Add legend\n",
    "ax.legend(loc='upper left')\n",
    "\n",
    "# Set labels and title\n",
    "ax.set_xlabel('Date')\n",
    "ax.set_ylabel('Price (€/MWh)')\n",
    "plt.title('Actual and Predicted Wholesale Energy Prices in Spain')\n",
    "\n",
    "# Specify the file path and format for saving the image\n",
    "plt.savefig('energy_price_predictions.png')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "dd874cc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Date  Predicted Value  Predicted Value Lower  \\\n",
      "425  2023-10-13       114.742371              67.599735   \n",
      "426  2023-10-14       114.996714              69.753294   \n",
      "427  2023-10-15       117.745676              73.568302   \n",
      "428  2023-10-16       122.316148              78.392934   \n",
      "429  2023-10-17       121.839469              77.722904   \n",
      "..          ...              ...                    ...   \n",
      "784  2024-10-06       212.780102             132.929924   \n",
      "785  2024-10-07       217.350574             140.685913   \n",
      "786  2024-10-08       216.873896             139.364304   \n",
      "787  2024-10-09       214.147816             143.098160   \n",
      "788  2024-10-10       211.980413             137.437152   \n",
      "\n",
      "     Predicted Value Higher  \n",
      "425              163.560866  \n",
      "426              162.795266  \n",
      "427              160.626338  \n",
      "428              166.282818  \n",
      "429              169.057140  \n",
      "..                      ...  \n",
      "784              285.717188  \n",
      "785              287.483841  \n",
      "786              288.272637  \n",
      "787              286.198926  \n",
      "788              283.388321  \n",
      "\n",
      "[364 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create a new dataframe with just the predicted values\n",
    "forecast_table = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].copy()\n",
    "\n",
    "# Rename the columns for clarity\n",
    "forecast_table.columns = ['Date', 'Predicted Value', 'Predicted Value Lower', 'Predicted Value Higher']\n",
    "\n",
    "# Optional: Format the 'Date' column as needed (e.g., to display in a more presentable format)\n",
    "forecast_table['Date'] = forecast_table['Date'].dt.strftime('%Y-%m-%d')\n",
    "\n",
    "# Filter dates after 12th October\n",
    "forecast_table = forecast_table[forecast_table['Date'] > '2023-10-12']\n",
    "\n",
    "# Display the filtered table\n",
    "print(forecast_table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "46f02ca2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "green"
         },
         "mode": "lines",
         "name": "Predicted Value",
         "type": "scatter",
         "x": [
          "2023-10-13",
          "2023-10-14",
          "2023-10-15",
          "2023-10-16",
          "2023-10-17",
          "2023-10-18",
          "2023-10-19",
          "2023-10-20",
          "2023-10-21",
          "2023-10-22",
          "2023-10-23",
          "2023-10-24",
          "2023-10-25",
          "2023-10-26",
          "2023-10-27",
          "2023-10-28",
          "2023-10-29",
          "2023-10-30",
          "2023-10-31",
          "2023-11-01",
          "2023-11-02",
          "2023-11-03",
          "2023-11-04",
          "2023-11-05",
          "2023-11-06",
          "2023-11-07",
          "2023-11-08",
          "2023-11-09",
          "2023-11-10",
          "2023-11-11",
          "2023-11-12",
          "2023-11-13",
          "2023-11-14",
          "2023-11-15",
          "2023-11-16",
          "2023-11-17",
          "2023-11-18",
          "2023-11-19",
          "2023-11-20",
          "2023-11-21",
          "2023-11-22",
          "2023-11-23",
          "2023-11-24",
          "2023-11-25",
          "2023-11-26",
          "2023-11-27",
          "2023-11-28",
          "2023-11-29",
          "2023-11-30",
          "2023-12-01",
          "2023-12-02",
          "2023-12-03",
          "2023-12-04",
          "2023-12-05",
          "2023-12-06",
          "2023-12-07",
          "2023-12-08",
          "2023-12-09",
          "2023-12-10",
          "2023-12-11",
          "2023-12-12",
          "2023-12-13",
          "2023-12-14",
          "2023-12-15",
          "2023-12-16",
          "2023-12-17",
          "2023-12-18",
          "2023-12-19",
          "2023-12-20",
          "2023-12-21",
          "2023-12-22",
          "2023-12-23",
          "2023-12-24",
          "2023-12-25",
          "2023-12-26",
          "2023-12-27",
          "2023-12-28",
          "2023-12-29",
          "2023-12-30",
          "2023-12-31",
          "2024-01-01",
          "2024-01-02",
          "2024-01-03",
          "2024-01-04",
          "2024-01-05",
          "2024-01-06",
          "2024-01-07",
          "2024-01-08",
          "2024-01-09",
          "2024-01-10",
          "2024-01-11",
          "2024-01-12",
          "2024-01-13",
          "2024-01-14",
          "2024-01-15",
          "2024-01-16",
          "2024-01-17",
          "2024-01-18",
          "2024-01-19",
          "2024-01-20",
          "2024-01-21",
          "2024-01-22",
          "2024-01-23",
          "2024-01-24",
          "2024-01-25",
          "2024-01-26",
          "2024-01-27",
          "2024-01-28",
          "2024-01-29",
          "2024-01-30",
          "2024-01-31",
          "2024-02-01",
          "2024-02-02",
          "2024-02-03",
          "2024-02-04",
          "2024-02-05",
          "2024-02-06",
          "2024-02-07",
          "2024-02-08",
          "2024-02-09",
          "2024-02-10",
          "2024-02-11",
          "2024-02-12",
          "2024-02-13",
          "2024-02-14",
          "2024-02-15",
          "2024-02-16",
          "2024-02-17",
          "2024-02-18",
          "2024-02-19",
          "2024-02-20",
          "2024-02-21",
          "2024-02-22",
          "2024-02-23",
          "2024-02-24",
          "2024-02-25",
          "2024-02-26",
          "2024-02-27",
          "2024-02-28",
          "2024-02-29",
          "2024-03-01",
          "2024-03-02",
          "2024-03-03",
          "2024-03-04",
          "2024-03-05",
          "2024-03-06",
          "2024-03-07",
          "2024-03-08",
          "2024-03-09",
          "2024-03-10",
          "2024-03-11",
          "2024-03-12",
          "2024-03-13",
          "2024-03-14",
          "2024-03-15",
          "2024-03-16",
          "2024-03-17",
          "2024-03-18",
          "2024-03-19",
          "2024-03-20",
          "2024-03-21",
          "2024-03-22",
          "2024-03-23",
          "2024-03-24",
          "2024-03-25",
          "2024-03-26",
          "2024-03-27",
          "2024-03-28",
          "2024-03-29",
          "2024-03-30",
          "2024-03-31",
          "2024-04-01",
          "2024-04-02",
          "2024-04-03",
          "2024-04-04",
          "2024-04-05",
          "2024-04-06",
          "2024-04-07",
          "2024-04-08",
          "2024-04-09",
          "2024-04-10",
          "2024-04-11",
          "2024-04-12",
          "2024-04-13",
          "2024-04-14",
          "2024-04-15",
          "2024-04-16",
          "2024-04-17",
          "2024-04-18",
          "2024-04-19",
          "2024-04-20",
          "2024-04-21",
          "2024-04-22",
          "2024-04-23",
          "2024-04-24",
          "2024-04-25",
          "2024-04-26",
          "2024-04-27",
          "2024-04-28",
          "2024-04-29",
          "2024-04-30",
          "2024-05-01",
          "2024-05-02",
          "2024-05-03",
          "2024-05-04",
          "2024-05-05",
          "2024-05-06",
          "2024-05-07",
          "2024-05-08",
          "2024-05-09",
          "2024-05-10",
          "2024-05-11",
          "2024-05-12",
          "2024-05-13",
          "2024-05-14",
          "2024-05-15",
          "2024-05-16",
          "2024-05-17",
          "2024-05-18",
          "2024-05-19",
          "2024-05-20",
          "2024-05-21",
          "2024-05-22",
          "2024-05-23",
          "2024-05-24",
          "2024-05-25",
          "2024-05-26",
          "2024-05-27",
          "2024-05-28",
          "2024-05-29",
          "2024-05-30",
          "2024-05-31",
          "2024-06-01",
          "2024-06-02",
          "2024-06-03",
          "2024-06-04",
          "2024-06-05",
          "2024-06-06",
          "2024-06-07",
          "2024-06-08",
          "2024-06-09",
          "2024-06-10",
          "2024-06-11",
          "2024-06-12",
          "2024-06-13",
          "2024-06-14",
          "2024-06-15",
          "2024-06-16",
          "2024-06-17",
          "2024-06-18",
          "2024-06-19",
          "2024-06-20",
          "2024-06-21",
          "2024-06-22",
          "2024-06-23",
          "2024-06-24",
          "2024-06-25",
          "2024-06-26",
          "2024-06-27",
          "2024-06-28",
          "2024-06-29",
          "2024-06-30",
          "2024-07-01",
          "2024-07-02",
          "2024-07-03",
          "2024-07-04",
          "2024-07-05",
          "2024-07-06",
          "2024-07-07",
          "2024-07-08",
          "2024-07-09",
          "2024-07-10",
          "2024-07-11",
          "2024-07-12",
          "2024-07-13",
          "2024-07-14",
          "2024-07-15",
          "2024-07-16",
          "2024-07-17",
          "2024-07-18",
          "2024-07-19",
          "2024-07-20",
          "2024-07-21",
          "2024-07-22",
          "2024-07-23",
          "2024-07-24",
          "2024-07-25",
          "2024-07-26",
          "2024-07-27",
          "2024-07-28",
          "2024-07-29",
          "2024-07-30",
          "2024-07-31",
          "2024-08-01",
          "2024-08-02",
          "2024-08-03",
          "2024-08-04",
          "2024-08-05",
          "2024-08-06",
          "2024-08-07",
          "2024-08-08",
          "2024-08-09",
          "2024-08-10",
          "2024-08-11",
          "2024-08-12",
          "2024-08-13",
          "2024-08-14",
          "2024-08-15",
          "2024-08-16",
          "2024-08-17",
          "2024-08-18",
          "2024-08-19",
          "2024-08-20",
          "2024-08-21",
          "2024-08-22",
          "2024-08-23",
          "2024-08-24",
          "2024-08-25",
          "2024-08-26",
          "2024-08-27",
          "2024-08-28",
          "2024-08-29",
          "2024-08-30",
          "2024-08-31",
          "2024-09-01",
          "2024-09-02",
          "2024-09-03",
          "2024-09-04",
          "2024-09-05",
          "2024-09-06",
          "2024-09-07",
          "2024-09-08",
          "2024-09-09",
          "2024-09-10",
          "2024-09-11",
          "2024-09-12",
          "2024-09-13",
          "2024-09-14",
          "2024-09-15",
          "2024-09-16",
          "2024-09-17",
          "2024-09-18",
          "2024-09-19",
          "2024-09-20",
          "2024-09-21",
          "2024-09-22",
          "2024-09-23",
          "2024-09-24",
          "2024-09-25",
          "2024-09-26",
          "2024-09-27",
          "2024-09-28",
          "2024-09-29",
          "2024-09-30",
          "2024-10-01",
          "2024-10-02",
          "2024-10-03",
          "2024-10-04",
          "2024-10-05",
          "2024-10-06",
          "2024-10-07",
          "2024-10-08",
          "2024-10-09",
          "2024-10-10"
         ],
         "y": [
          114.74237138573545,
          114.99671428241955,
          117.74567603840055,
          122.31614782462599,
          121.83946943679268,
          119.11338956179964,
          116.94598733436388,
          116.60579150480307,
          116.86013440148909,
          119.60909615746874,
          124.17956794369454,
          123.70288955586831,
          120.9768096808647,
          118.80940745342848,
          118.46921162386886,
          118.72355452055524,
          121.47251627653952,
          126.04298806276316,
          125.56630967493273,
          122.84022979992764,
          120.67282757249643,
          120.33263174293458,
          120.5869746396188,
          123.33593639559065,
          127.90640818183114,
          127.42972979399745,
          124.7036499189927,
          122.53624769156526,
          122.19605186200032,
          122.45039475868488,
          125.19935651466136,
          129.7698283009003,
          129.29314991306225,
          126.56707003806999,
          124.3996678106315,
          124.05947198106794,
          124.31381487775275,
          127.0627766337321,
          131.63324841995853,
          131.15657003212704,
          128.43049015713405,
          126.26308792969616,
          125.92289210013183,
          126.17723499682046,
          128.9261967528004,
          133.49666853902707,
          133.01999015119148,
          130.293910276198,
          128.12650804876077,
          127.78631221920213,
          128.0406551158859,
          130.7896168718711,
          135.36008865809512,
          134.88341027025655,
          132.1573303952752,
          129.98992816782865,
          129.64973233826788,
          129.90407523495196,
          132.65303699094056,
          137.22350877716315,
          136.74683038933185,
          134.02075051433928,
          131.85334828689335,
          131.51315245733556,
          131.7674953540198,
          134.516457109993,
          139.08692889623222,
          138.61025050839692,
          135.88417063340432,
          133.71676840595953,
          133.37657257640313,
          133.6309154730859,
          136.37987722906243,
          140.9503490153002,
          140.4736706274614,
          137.7475907524684,
          135.58018852503005,
          135.23999269546704,
          135.4943355921555,
          138.24329734813318,
          142.81376913436878,
          142.33709074653697,
          139.61101087153347,
          137.44360864409634,
          137.10341281453358,
          137.3577557112215,
          140.10671746720269,
          144.6771892534276,
          144.2005108656017,
          141.47443099059637,
          139.30702876316101,
          138.96683293360118,
          139.22117583028515,
          141.97013758627338,
          146.54060937249614,
          146.0639309846665,
          143.33785110966159,
          141.17044888222728,
          140.83025305266884,
          141.08459594935294,
          143.83355770534155,
          148.40402949156464,
          147.92735110373093,
          145.2012712287388,
          143.03386900129186,
          142.6936731717346,
          142.9480160684208,
          145.69697782441236,
          150.26744961062352,
          149.79077122279546,
          147.06469134780275,
          144.8972891203657,
          144.55709329080037,
          144.8114361874869,
          147.5603979434647,
          152.13086972969148,
          151.65419134186016,
          148.92811146686677,
          146.76070923943027,
          146.4205134098688,
          146.67485630655295,
          149.42381806253422,
          153.99428984876056,
          153.51761146092497,
          150.79153158593192,
          148.62412935849656,
          148.28393352893642,
          148.5382764256208,
          151.28723818160375,
          155.85770996782864,
          155.38103158000055,
          152.65495170499696,
          150.48754947756117,
          150.1473536480003,
          150.40169654468863,
          153.1506583006561,
          157.72113008689718,
          157.24445169906505,
          154.51837182407317,
          152.35096959662746,
          152.01077376706792,
          152.2651166637522,
          155.0140784197256,
          159.5845502059652,
          159.1078718181301,
          156.38179194313608,
          154.21438971569796,
          153.87419388613364,
          154.1285367828183,
          156.87749853879632,
          161.4479703250338,
          160.97129193719456,
          158.24521206220123,
          156.07780983476425,
          155.73761400520124,
          155.99195690188787,
          158.7409186578645,
          163.31139044409264,
          162.83471205625938,
          160.10863218126627,
          157.9412299538289,
          157.601034124267,
          157.85537702094976,
          160.60433877693526,
          165.17481056316112,
          164.69813217532382,
          161.9720523003303,
          159.80465007289675,
          159.4644542433354,
          159.71879714001932,
          162.46775889600596,
          167.03823068222917,
          166.5615522943997,
          163.83547241940866,
          161.66807019196142,
          161.32787436240122,
          161.58221725908533,
          164.33117901507546,
          168.90165080129822,
          168.42497241346445,
          165.69889253847157,
          163.531490311026,
          163.19129448146694,
          163.4456373781532,
          166.19459913412916,
          170.7650709203662,
          170.28839253252926,
          167.5623126575367,
          165.39491043009224,
          165.05471460053533,
          165.3090574972211,
          168.05801925319733,
          172.62849103943424,
          172.15181265159364,
          169.42573277660068,
          167.25833054916114,
          166.91813471960296,
          167.17247761628877,
          169.92143937226808,
          174.49191115849362,
          174.0152327706693,
          171.28915289566467,
          169.12175066822903,
          168.78155483866684,
          169.03589773535495,
          171.7848594913376,
          176.35533127756162,
          175.87865288973376,
          173.15257301472874,
          170.98517078729367,
          170.6449749577344,
          170.8993178544186,
          173.64827961040703,
          178.2187513966307,
          177.7420730087988,
          175.01599313379373,
          172.8485909063658,
          172.5083950768021,
          172.76273797348463,
          175.51169972947656,
          180.08217151569878,
          179.6054931278632,
          176.87941325287093,
          174.7120110254304,
          174.37181519586602,
          174.6261580925542,
          177.37511984852893,
          181.9455916347576,
          181.46891324692768,
          178.74283337193611,
          176.5754311444967,
          176.23523531493362,
          176.4895782116203,
          179.23853996759843,
          183.80901175382556,
          183.33233336599278,
          180.60625349099902,
          178.43885126356298,
          178.09865543400204,
          178.35299833068638,
          181.10196008666918,
          185.6724318728941,
          185.1957534850572,
          182.46967361007626,
          180.30227138262927,
          179.96207555306967,
          180.21641844975593,
          182.96538020573735,
          187.5358519919627,
          187.0591736041329,
          184.33309372914033,
          182.1656915016939,
          181.8254956721354,
          182.07983856882203,
          184.828800324791,
          189.3992721110312,
          188.92259372319734,
          186.19651384820537,
          184.0291116207618,
          183.68891579120117,
          183.9432586878873,
          186.6922204438605,
          191.2626922300993,
          190.7860138422621,
          188.05993396727052,
          185.89253173983067,
          185.55233591026695,
          185.80667880695347,
          188.55564056293116,
          193.12611234916824,
          192.649433961338,
          189.9233540863334,
          187.7559518588969,
          187.4157560293346,
          187.67009892602127,
          190.41906068200197,
          194.98953246822668,
          194.5128540804028,
          191.78677420539853,
          189.61937197796158,
          189.27917614839845,
          189.53351904508492,
          192.28248080107022,
          196.85295258729514,
          196.37627419946725,
          193.65019432446252,
          191.48279209702616,
          191.14259626746878,
          191.39693916415274,
          194.1459009201409,
          198.7163727063632,
          198.23969431853203,
          195.51361444353978,
          193.34621221609407,
          193.00601638653262,
          193.26035928321875,
          196.0093210392104,
          200.5797928254312,
          200.10311443759647,
          197.3770345626038,
          195.2096323351587,
          194.86943650560016,
          195.12377940228657,
          197.87274115826284,
          202.44321294449102,
          201.96653455666154,
          199.2404546816689,
          197.07305245422495,
          196.73285662466864,
          196.9871995213527,
          199.73616127733223,
          204.30663306355962,
          203.82995467572604,
          201.1038748007329,
          198.93647257329545,
          198.59627674373442,
          198.85061964042225,
          201.59958139640298,
          206.17005318262764,
          205.6933747948016,
          202.96729491979804,
          200.79989269236177,
          200.45969686280014,
          200.71403975948832,
          203.46300151547254,
          208.0334733016957,
          207.55679491386638,
          204.830715038861,
          202.663312811428,
          202.32311698186783,
          202.57745987855196,
          205.32642163452488,
          209.8968934207643,
          209.42021503293114,
          206.6941351579261,
          204.52673293049853,
          204.18653710093542,
          204.4408799976198,
          207.18984175359316,
          211.76031353983285,
          211.2836351519956,
          208.55755527700333,
          206.3901530495631,
          206.04995722000115,
          206.3043001166876,
          209.05326187266382,
          213.62373365889158,
          213.14705527105997,
          210.4209753960673,
          208.25357316863102,
          207.91337733906687,
          208.16772023575368,
          210.91668199173336,
          215.48715377795963,
          215.01047539012478,
          212.28439551513134,
          210.11699328769566,
          209.77679745813532,
          210.03114035481977,
          212.780102110804,
          217.3505738970287,
          216.87389550918948,
          214.14781563420854,
          211.98041340676195
         ]
        },
        {
         "line": {
          "color": "lightgray"
         },
         "mode": "lines",
         "name": "Uncertainty Interval Lower",
         "type": "scatter",
         "x": [
          "2023-10-13",
          "2023-10-14",
          "2023-10-15",
          "2023-10-16",
          "2023-10-17",
          "2023-10-18",
          "2023-10-19",
          "2023-10-20",
          "2023-10-21",
          "2023-10-22",
          "2023-10-23",
          "2023-10-24",
          "2023-10-25",
          "2023-10-26",
          "2023-10-27",
          "2023-10-28",
          "2023-10-29",
          "2023-10-30",
          "2023-10-31",
          "2023-11-01",
          "2023-11-02",
          "2023-11-03",
          "2023-11-04",
          "2023-11-05",
          "2023-11-06",
          "2023-11-07",
          "2023-11-08",
          "2023-11-09",
          "2023-11-10",
          "2023-11-11",
          "2023-11-12",
          "2023-11-13",
          "2023-11-14",
          "2023-11-15",
          "2023-11-16",
          "2023-11-17",
          "2023-11-18",
          "2023-11-19",
          "2023-11-20",
          "2023-11-21",
          "2023-11-22",
          "2023-11-23",
          "2023-11-24",
          "2023-11-25",
          "2023-11-26",
          "2023-11-27",
          "2023-11-28",
          "2023-11-29",
          "2023-11-30",
          "2023-12-01",
          "2023-12-02",
          "2023-12-03",
          "2023-12-04",
          "2023-12-05",
          "2023-12-06",
          "2023-12-07",
          "2023-12-08",
          "2023-12-09",
          "2023-12-10",
          "2023-12-11",
          "2023-12-12",
          "2023-12-13",
          "2023-12-14",
          "2023-12-15",
          "2023-12-16",
          "2023-12-17",
          "2023-12-18",
          "2023-12-19",
          "2023-12-20",
          "2023-12-21",
          "2023-12-22",
          "2023-12-23",
          "2023-12-24",
          "2023-12-25",
          "2023-12-26",
          "2023-12-27",
          "2023-12-28",
          "2023-12-29",
          "2023-12-30",
          "2023-12-31",
          "2024-01-01",
          "2024-01-02",
          "2024-01-03",
          "2024-01-04",
          "2024-01-05",
          "2024-01-06",
          "2024-01-07",
          "2024-01-08",
          "2024-01-09",
          "2024-01-10",
          "2024-01-11",
          "2024-01-12",
          "2024-01-13",
          "2024-01-14",
          "2024-01-15",
          "2024-01-16",
          "2024-01-17",
          "2024-01-18",
          "2024-01-19",
          "2024-01-20",
          "2024-01-21",
          "2024-01-22",
          "2024-01-23",
          "2024-01-24",
          "2024-01-25",
          "2024-01-26",
          "2024-01-27",
          "2024-01-28",
          "2024-01-29",
          "2024-01-30",
          "2024-01-31",
          "2024-02-01",
          "2024-02-02",
          "2024-02-03",
          "2024-02-04",
          "2024-02-05",
          "2024-02-06",
          "2024-02-07",
          "2024-02-08",
          "2024-02-09",
          "2024-02-10",
          "2024-02-11",
          "2024-02-12",
          "2024-02-13",
          "2024-02-14",
          "2024-02-15",
          "2024-02-16",
          "2024-02-17",
          "2024-02-18",
          "2024-02-19",
          "2024-02-20",
          "2024-02-21",
          "2024-02-22",
          "2024-02-23",
          "2024-02-24",
          "2024-02-25",
          "2024-02-26",
          "2024-02-27",
          "2024-02-28",
          "2024-02-29",
          "2024-03-01",
          "2024-03-02",
          "2024-03-03",
          "2024-03-04",
          "2024-03-05",
          "2024-03-06",
          "2024-03-07",
          "2024-03-08",
          "2024-03-09",
          "2024-03-10",
          "2024-03-11",
          "2024-03-12",
          "2024-03-13",
          "2024-03-14",
          "2024-03-15",
          "2024-03-16",
          "2024-03-17",
          "2024-03-18",
          "2024-03-19",
          "2024-03-20",
          "2024-03-21",
          "2024-03-22",
          "2024-03-23",
          "2024-03-24",
          "2024-03-25",
          "2024-03-26",
          "2024-03-27",
          "2024-03-28",
          "2024-03-29",
          "2024-03-30",
          "2024-03-31",
          "2024-04-01",
          "2024-04-02",
          "2024-04-03",
          "2024-04-04",
          "2024-04-05",
          "2024-04-06",
          "2024-04-07",
          "2024-04-08",
          "2024-04-09",
          "2024-04-10",
          "2024-04-11",
          "2024-04-12",
          "2024-04-13",
          "2024-04-14",
          "2024-04-15",
          "2024-04-16",
          "2024-04-17",
          "2024-04-18",
          "2024-04-19",
          "2024-04-20",
          "2024-04-21",
          "2024-04-22",
          "2024-04-23",
          "2024-04-24",
          "2024-04-25",
          "2024-04-26",
          "2024-04-27",
          "2024-04-28",
          "2024-04-29",
          "2024-04-30",
          "2024-05-01",
          "2024-05-02",
          "2024-05-03",
          "2024-05-04",
          "2024-05-05",
          "2024-05-06",
          "2024-05-07",
          "2024-05-08",
          "2024-05-09",
          "2024-05-10",
          "2024-05-11",
          "2024-05-12",
          "2024-05-13",
          "2024-05-14",
          "2024-05-15",
          "2024-05-16",
          "2024-05-17",
          "2024-05-18",
          "2024-05-19",
          "2024-05-20",
          "2024-05-21",
          "2024-05-22",
          "2024-05-23",
          "2024-05-24",
          "2024-05-25",
          "2024-05-26",
          "2024-05-27",
          "2024-05-28",
          "2024-05-29",
          "2024-05-30",
          "2024-05-31",
          "2024-06-01",
          "2024-06-02",
          "2024-06-03",
          "2024-06-04",
          "2024-06-05",
          "2024-06-06",
          "2024-06-07",
          "2024-06-08",
          "2024-06-09",
          "2024-06-10",
          "2024-06-11",
          "2024-06-12",
          "2024-06-13",
          "2024-06-14",
          "2024-06-15",
          "2024-06-16",
          "2024-06-17",
          "2024-06-18",
          "2024-06-19",
          "2024-06-20",
          "2024-06-21",
          "2024-06-22",
          "2024-06-23",
          "2024-06-24",
          "2024-06-25",
          "2024-06-26",
          "2024-06-27",
          "2024-06-28",
          "2024-06-29",
          "2024-06-30",
          "2024-07-01",
          "2024-07-02",
          "2024-07-03",
          "2024-07-04",
          "2024-07-05",
          "2024-07-06",
          "2024-07-07",
          "2024-07-08",
          "2024-07-09",
          "2024-07-10",
          "2024-07-11",
          "2024-07-12",
          "2024-07-13",
          "2024-07-14",
          "2024-07-15",
          "2024-07-16",
          "2024-07-17",
          "2024-07-18",
          "2024-07-19",
          "2024-07-20",
          "2024-07-21",
          "2024-07-22",
          "2024-07-23",
          "2024-07-24",
          "2024-07-25",
          "2024-07-26",
          "2024-07-27",
          "2024-07-28",
          "2024-07-29",
          "2024-07-30",
          "2024-07-31",
          "2024-08-01",
          "2024-08-02",
          "2024-08-03",
          "2024-08-04",
          "2024-08-05",
          "2024-08-06",
          "2024-08-07",
          "2024-08-08",
          "2024-08-09",
          "2024-08-10",
          "2024-08-11",
          "2024-08-12",
          "2024-08-13",
          "2024-08-14",
          "2024-08-15",
          "2024-08-16",
          "2024-08-17",
          "2024-08-18",
          "2024-08-19",
          "2024-08-20",
          "2024-08-21",
          "2024-08-22",
          "2024-08-23",
          "2024-08-24",
          "2024-08-25",
          "2024-08-26",
          "2024-08-27",
          "2024-08-28",
          "2024-08-29",
          "2024-08-30",
          "2024-08-31",
          "2024-09-01",
          "2024-09-02",
          "2024-09-03",
          "2024-09-04",
          "2024-09-05",
          "2024-09-06",
          "2024-09-07",
          "2024-09-08",
          "2024-09-09",
          "2024-09-10",
          "2024-09-11",
          "2024-09-12",
          "2024-09-13",
          "2024-09-14",
          "2024-09-15",
          "2024-09-16",
          "2024-09-17",
          "2024-09-18",
          "2024-09-19",
          "2024-09-20",
          "2024-09-21",
          "2024-09-22",
          "2024-09-23",
          "2024-09-24",
          "2024-09-25",
          "2024-09-26",
          "2024-09-27",
          "2024-09-28",
          "2024-09-29",
          "2024-09-30",
          "2024-10-01",
          "2024-10-02",
          "2024-10-03",
          "2024-10-04",
          "2024-10-05",
          "2024-10-06",
          "2024-10-07",
          "2024-10-08",
          "2024-10-09",
          "2024-10-10"
         ],
         "y": [
          67.59973457056365,
          69.75329369268239,
          73.56830226332798,
          78.39293416338955,
          77.72290395169215,
          76.84441099784789,
          73.4004690773922,
          68.86015441273538,
          69.05939166534868,
          75.53905414273207,
          79.77327190985207,
          77.75777636989142,
          74.47564837401589,
          73.25220062343786,
          73.19921317349898,
          73.95551050930801,
          73.80005873304847,
          81.13067159809086,
          76.10821712279723,
          78.0136979546659,
          76.83912973937369,
          75.10825745144487,
          74.89244780444099,
          80.53111092252337,
          80.90313205822137,
          82.39860617662124,
          82.9852274551156,
          78.54426343664946,
          76.37088255799056,
          75.62270930071473,
          78.44423473314387,
          83.31794028288996,
          81.08813231123852,
          77.42891831061914,
          80.4999734635517,
          77.49952124079071,
          79.2905788952003,
          78.98312717215019,
          88.81328044137572,
          84.30076050515069,
          81.58100118412993,
          79.9637769050739,
          80.38116370899711,
          80.20216056393348,
          82.93894798291399,
          88.31570654233907,
          91.62551823194524,
          82.5570661496501,
          81.53611756523651,
          79.68155732683942,
          82.49979676856216,
          83.34502353182872,
          88.64898050530209,
          89.7233504132587,
          85.43133819634083,
          85.44648049832078,
          81.61949376350282,
          89.20937506490249,
          88.78193480009779,
          89.95166719015114,
          87.42146097299427,
          86.3661027148834,
          87.0435100609161,
          85.6103416383881,
          84.33770061631695,
          89.80125911478125,
          92.40652962955079,
          93.28011015310287,
          91.59010707416917,
          88.71054062566215,
          86.00137339448091,
          86.67494502813817,
          88.97341728536718,
          95.33771274797556,
          93.24095380459659,
          91.3315881274282,
          91.00698922836641,
          89.40528044462808,
          89.56147358791105,
          95.61906581296792,
          92.54612131693929,
          97.43995711309014,
          90.98503646400432,
          91.56703006478504,
          88.75111922905118,
          90.8020036381119,
          93.77520005280445,
          97.86885987494341,
          98.8172426564179,
          97.86197819327157,
          90.8968562661031,
          92.39604718159386,
          93.00585485799978,
          90.77657561186528,
          102.5016255079323,
          99.62958196602023,
          94.58598362938179,
          94.07116207569428,
          91.36555413610122,
          97.16313715715535,
          94.06675462623087,
          104.73353409360584,
          100.6367028916755,
          96.24024326973657,
          99.6975387118364,
          96.70675664430438,
          98.90335355758823,
          101.29410847932921,
          103.66463663923929,
          103.10431094846503,
          102.2084915042184,
          98.02708705754117,
          92.20585510250166,
          96.24305824016847,
          101.4417319973802,
          106.93416788041247,
          103.55909409030508,
          99.7867921340186,
          97.45244044346303,
          98.63424178281791,
          99.90170908120923,
          101.13807698430091,
          109.34692033339815,
          105.72768182779889,
          105.60400572877981,
          100.46181388447361,
          103.91205398145186,
          104.57959267921586,
          104.04435682325217,
          107.86478259741452,
          108.0187775644969,
          109.18406565399047,
          101.72664903880428,
          103.93246779921348,
          98.77289798649254,
          105.26820563895443,
          111.03606011844128,
          110.23685281552393,
          105.04598201967958,
          100.27062533335715,
          105.05034119546318,
          103.48242908898135,
          106.53213415654211,
          114.43410970232202,
          113.13401835782282,
          105.86637562083473,
          106.56088615010849,
          107.54354102080698,
          107.64944949352933,
          104.84739900665984,
          113.93510233767303,
          112.91155873897279,
          110.29972979190467,
          108.13295184811746,
          108.10740780962469,
          108.09057540384919,
          111.18992805274829,
          112.25258717996223,
          111.92357658117785,
          109.26519955926254,
          111.79978973804548,
          108.51058145343865,
          108.4480186571405,
          107.13552537729038,
          117.9094841352388,
          114.61252965719076,
          112.37455442066174,
          107.95030573917623,
          110.27411685755159,
          113.05571108542163,
          113.91897867131757,
          116.19108612164193,
          117.5267693176626,
          114.66169581175336,
          113.61399717622054,
          110.67339719110454,
          108.56495852366659,
          114.30395405358459,
          119.1764379210695,
          114.96949146873918,
          112.75826023594097,
          114.270237468382,
          111.67628497727631,
          114.66766048958604,
          114.1294997519559,
          119.44288520414882,
          118.94204255392032,
          115.3369560739508,
          113.27935192178755,
          110.93065437683339,
          115.85019327081349,
          111.3731940371964,
          123.06331316676527,
          124.38886536158759,
          120.37799303887525,
          112.13015735486444,
          117.11511221320836,
          113.93678704110151,
          118.21292671407808,
          121.6741893845544,
          121.85007577619841,
          113.26109377357096,
          116.21983569327972,
          111.62284425456382,
          115.01759321070763,
          118.71407696504507,
          125.74627615395416,
          125.85363155401018,
          119.76022952667257,
          117.59623732786015,
          118.54686260051928,
          117.62415409068993,
          124.16836489105631,
          123.8663456259253,
          122.3829256257585,
          121.55487963091473,
          120.8196929764833,
          120.76013132313749,
          117.61241458404233,
          121.92752184642832,
          125.92791803745776,
          122.73433510212006,
          119.02391028880503,
          120.81806718214021,
          117.41803425192766,
          120.03889951637319,
          127.10149924458547,
          129.44643856085483,
          121.76756606340632,
          118.82226352126396,
          121.93955741980506,
          123.321954418923,
          118.80668316697127,
          126.93520137521607,
          125.73214666603202,
          129.3473065371293,
          128.70239942657022,
          119.9347872443051,
          120.52787101132364,
          119.41660816079687,
          125.63496506496261,
          129.08148890428166,
          123.8359258111172,
          125.82503899894168,
          124.13582775442951,
          122.98135350470363,
          119.15385079744276,
          121.97750832371771,
          129.83105810340834,
          130.580773099613,
          126.93957674087426,
          127.1492953482608,
          121.18829023532793,
          123.8417160238825,
          125.81006956069938,
          134.88343138292169,
          129.2719009514391,
          127.96662295324688,
          126.1671348181764,
          123.25216061287091,
          126.89666838594553,
          127.41456518207009,
          134.60207600924107,
          133.37172784363227,
          127.52851272214362,
          128.59625830003407,
          123.38332636323382,
          124.60131254994883,
          129.72317449337257,
          132.48335344540303,
          129.5965846620435,
          128.3252684478835,
          129.9954634952371,
          122.58378132639916,
          126.51499403744333,
          131.76270958081952,
          133.75070170930687,
          136.15465439388169,
          129.52887512267236,
          128.715151560064,
          132.534528917315,
          126.35100856976021,
          129.5789458244082,
          138.5810821928916,
          136.71064556617554,
          131.8444180028714,
          130.23055254344968,
          124.17606487342553,
          129.5632395819779,
          130.48171351476935,
          134.25356116999413,
          133.11032044060738,
          134.1596749699571,
          130.87196063446132,
          127.56094192307842,
          130.25616158385867,
          133.5828838011068,
          133.31664979118318,
          135.0275193148101,
          133.1526852320213,
          127.86324547191792,
          134.6897373809295,
          128.1882854599272,
          133.84627305041306,
          137.15651551351522,
          135.69114263647637,
          134.56339366700547,
          130.00273545112583,
          131.1721237486166,
          131.735541014622,
          134.19476435627544,
          138.28497175076328,
          138.9173581802217,
          133.656288922427,
          134.41305474149118,
          125.99108716591894,
          134.04218647713813,
          133.97990156343226,
          140.17850805583564,
          138.27931626917774,
          137.13439044934069,
          130.62499152983983,
          136.79321728454636,
          128.70655585963343,
          137.35509859380178,
          136.327972651947,
          139.8445759728947,
          136.53234998241822,
          132.8480724751094,
          127.5032999703125,
          135.74998556267064,
          137.93024474813686,
          141.8132524555725,
          140.99483514227117,
          139.05898732257631,
          136.31850211500176,
          135.8911832825169,
          136.409861639182,
          137.66149130028646,
          140.99407478059845,
          139.7317260504086,
          137.60384578382434,
          135.13526951654646,
          135.51414852288286,
          132.7904397171718,
          138.445642773679,
          142.32793655772167,
          136.18178787272532,
          137.9797799539096,
          132.72846549710798,
          137.05880397376777,
          133.09241822933717,
          135.80732225460625,
          139.0464475581603,
          140.92258755165565,
          137.83557578782236,
          134.85912569701446,
          133.5629945303774,
          134.6007541365038,
          132.92992367099373,
          140.68591287162732,
          139.36430437535182,
          143.09815967866788,
          137.43715215259692
         ]
        },
        {
         "fill": "tonexty",
         "line": {
          "color": "lightgray"
         },
         "mode": "lines",
         "name": "Uncertainty Interval Higher",
         "type": "scatter",
         "x": [
          "2023-10-13",
          "2023-10-14",
          "2023-10-15",
          "2023-10-16",
          "2023-10-17",
          "2023-10-18",
          "2023-10-19",
          "2023-10-20",
          "2023-10-21",
          "2023-10-22",
          "2023-10-23",
          "2023-10-24",
          "2023-10-25",
          "2023-10-26",
          "2023-10-27",
          "2023-10-28",
          "2023-10-29",
          "2023-10-30",
          "2023-10-31",
          "2023-11-01",
          "2023-11-02",
          "2023-11-03",
          "2023-11-04",
          "2023-11-05",
          "2023-11-06",
          "2023-11-07",
          "2023-11-08",
          "2023-11-09",
          "2023-11-10",
          "2023-11-11",
          "2023-11-12",
          "2023-11-13",
          "2023-11-14",
          "2023-11-15",
          "2023-11-16",
          "2023-11-17",
          "2023-11-18",
          "2023-11-19",
          "2023-11-20",
          "2023-11-21",
          "2023-11-22",
          "2023-11-23",
          "2023-11-24",
          "2023-11-25",
          "2023-11-26",
          "2023-11-27",
          "2023-11-28",
          "2023-11-29",
          "2023-11-30",
          "2023-12-01",
          "2023-12-02",
          "2023-12-03",
          "2023-12-04",
          "2023-12-05",
          "2023-12-06",
          "2023-12-07",
          "2023-12-08",
          "2023-12-09",
          "2023-12-10",
          "2023-12-11",
          "2023-12-12",
          "2023-12-13",
          "2023-12-14",
          "2023-12-15",
          "2023-12-16",
          "2023-12-17",
          "2023-12-18",
          "2023-12-19",
          "2023-12-20",
          "2023-12-21",
          "2023-12-22",
          "2023-12-23",
          "2023-12-24",
          "2023-12-25",
          "2023-12-26",
          "2023-12-27",
          "2023-12-28",
          "2023-12-29",
          "2023-12-30",
          "2023-12-31",
          "2024-01-01",
          "2024-01-02",
          "2024-01-03",
          "2024-01-04",
          "2024-01-05",
          "2024-01-06",
          "2024-01-07",
          "2024-01-08",
          "2024-01-09",
          "2024-01-10",
          "2024-01-11",
          "2024-01-12",
          "2024-01-13",
          "2024-01-14",
          "2024-01-15",
          "2024-01-16",
          "2024-01-17",
          "2024-01-18",
          "2024-01-19",
          "2024-01-20",
          "2024-01-21",
          "2024-01-22",
          "2024-01-23",
          "2024-01-24",
          "2024-01-25",
          "2024-01-26",
          "2024-01-27",
          "2024-01-28",
          "2024-01-29",
          "2024-01-30",
          "2024-01-31",
          "2024-02-01",
          "2024-02-02",
          "2024-02-03",
          "2024-02-04",
          "2024-02-05",
          "2024-02-06",
          "2024-02-07",
          "2024-02-08",
          "2024-02-09",
          "2024-02-10",
          "2024-02-11",
          "2024-02-12",
          "2024-02-13",
          "2024-02-14",
          "2024-02-15",
          "2024-02-16",
          "2024-02-17",
          "2024-02-18",
          "2024-02-19",
          "2024-02-20",
          "2024-02-21",
          "2024-02-22",
          "2024-02-23",
          "2024-02-24",
          "2024-02-25",
          "2024-02-26",
          "2024-02-27",
          "2024-02-28",
          "2024-02-29",
          "2024-03-01",
          "2024-03-02",
          "2024-03-03",
          "2024-03-04",
          "2024-03-05",
          "2024-03-06",
          "2024-03-07",
          "2024-03-08",
          "2024-03-09",
          "2024-03-10",
          "2024-03-11",
          "2024-03-12",
          "2024-03-13",
          "2024-03-14",
          "2024-03-15",
          "2024-03-16",
          "2024-03-17",
          "2024-03-18",
          "2024-03-19",
          "2024-03-20",
          "2024-03-21",
          "2024-03-22",
          "2024-03-23",
          "2024-03-24",
          "2024-03-25",
          "2024-03-26",
          "2024-03-27",
          "2024-03-28",
          "2024-03-29",
          "2024-03-30",
          "2024-03-31",
          "2024-04-01",
          "2024-04-02",
          "2024-04-03",
          "2024-04-04",
          "2024-04-05",
          "2024-04-06",
          "2024-04-07",
          "2024-04-08",
          "2024-04-09",
          "2024-04-10",
          "2024-04-11",
          "2024-04-12",
          "2024-04-13",
          "2024-04-14",
          "2024-04-15",
          "2024-04-16",
          "2024-04-17",
          "2024-04-18",
          "2024-04-19",
          "2024-04-20",
          "2024-04-21",
          "2024-04-22",
          "2024-04-23",
          "2024-04-24",
          "2024-04-25",
          "2024-04-26",
          "2024-04-27",
          "2024-04-28",
          "2024-04-29",
          "2024-04-30",
          "2024-05-01",
          "2024-05-02",
          "2024-05-03",
          "2024-05-04",
          "2024-05-05",
          "2024-05-06",
          "2024-05-07",
          "2024-05-08",
          "2024-05-09",
          "2024-05-10",
          "2024-05-11",
          "2024-05-12",
          "2024-05-13",
          "2024-05-14",
          "2024-05-15",
          "2024-05-16",
          "2024-05-17",
          "2024-05-18",
          "2024-05-19",
          "2024-05-20",
          "2024-05-21",
          "2024-05-22",
          "2024-05-23",
          "2024-05-24",
          "2024-05-25",
          "2024-05-26",
          "2024-05-27",
          "2024-05-28",
          "2024-05-29",
          "2024-05-30",
          "2024-05-31",
          "2024-06-01",
          "2024-06-02",
          "2024-06-03",
          "2024-06-04",
          "2024-06-05",
          "2024-06-06",
          "2024-06-07",
          "2024-06-08",
          "2024-06-09",
          "2024-06-10",
          "2024-06-11",
          "2024-06-12",
          "2024-06-13",
          "2024-06-14",
          "2024-06-15",
          "2024-06-16",
          "2024-06-17",
          "2024-06-18",
          "2024-06-19",
          "2024-06-20",
          "2024-06-21",
          "2024-06-22",
          "2024-06-23",
          "2024-06-24",
          "2024-06-25",
          "2024-06-26",
          "2024-06-27",
          "2024-06-28",
          "2024-06-29",
          "2024-06-30",
          "2024-07-01",
          "2024-07-02",
          "2024-07-03",
          "2024-07-04",
          "2024-07-05",
          "2024-07-06",
          "2024-07-07",
          "2024-07-08",
          "2024-07-09",
          "2024-07-10",
          "2024-07-11",
          "2024-07-12",
          "2024-07-13",
          "2024-07-14",
          "2024-07-15",
          "2024-07-16",
          "2024-07-17",
          "2024-07-18",
          "2024-07-19",
          "2024-07-20",
          "2024-07-21",
          "2024-07-22",
          "2024-07-23",
          "2024-07-24",
          "2024-07-25",
          "2024-07-26",
          "2024-07-27",
          "2024-07-28",
          "2024-07-29",
          "2024-07-30",
          "2024-07-31",
          "2024-08-01",
          "2024-08-02",
          "2024-08-03",
          "2024-08-04",
          "2024-08-05",
          "2024-08-06",
          "2024-08-07",
          "2024-08-08",
          "2024-08-09",
          "2024-08-10",
          "2024-08-11",
          "2024-08-12",
          "2024-08-13",
          "2024-08-14",
          "2024-08-15",
          "2024-08-16",
          "2024-08-17",
          "2024-08-18",
          "2024-08-19",
          "2024-08-20",
          "2024-08-21",
          "2024-08-22",
          "2024-08-23",
          "2024-08-24",
          "2024-08-25",
          "2024-08-26",
          "2024-08-27",
          "2024-08-28",
          "2024-08-29",
          "2024-08-30",
          "2024-08-31",
          "2024-09-01",
          "2024-09-02",
          "2024-09-03",
          "2024-09-04",
          "2024-09-05",
          "2024-09-06",
          "2024-09-07",
          "2024-09-08",
          "2024-09-09",
          "2024-09-10",
          "2024-09-11",
          "2024-09-12",
          "2024-09-13",
          "2024-09-14",
          "2024-09-15",
          "2024-09-16",
          "2024-09-17",
          "2024-09-18",
          "2024-09-19",
          "2024-09-20",
          "2024-09-21",
          "2024-09-22",
          "2024-09-23",
          "2024-09-24",
          "2024-09-25",
          "2024-09-26",
          "2024-09-27",
          "2024-09-28",
          "2024-09-29",
          "2024-09-30",
          "2024-10-01",
          "2024-10-02",
          "2024-10-03",
          "2024-10-04",
          "2024-10-05",
          "2024-10-06",
          "2024-10-07",
          "2024-10-08",
          "2024-10-09",
          "2024-10-10"
         ],
         "y": [
          163.56086601838882,
          162.79526559986948,
          160.62633821777771,
          166.2828179234546,
          169.05714001256845,
          164.69069179872173,
          164.15895840312874,
          160.74417560933708,
          163.8785666214979,
          166.95251650116907,
          167.96864443313095,
          169.7784385725949,
          166.86970008437945,
          158.8512406320873,
          164.16952605560382,
          164.9645468285931,
          165.52007611033352,
          171.2566624392465,
          168.48912518006063,
          167.61478171598736,
          169.35983830065015,
          161.85580876977113,
          167.7339444551847,
          170.7098219175207,
          172.70214551879215,
          172.44218991127167,
          167.5081850427494,
          169.49725662467526,
          170.81601866496104,
          166.9121006338834,
          173.61551025211836,
          174.47220503283606,
          170.34498964831374,
          174.31196157311922,
          167.64989168128915,
          171.13478507749988,
          168.66289966776728,
          172.47972807627153,
          176.88629948592842,
          174.9296664853027,
          173.61115252095195,
          175.37636351136325,
          170.34883371500854,
          172.21996084690974,
          174.87903147074618,
          178.72423136961132,
          176.368475012855,
          176.34669836394042,
          172.31099906709863,
          172.92449197574322,
          173.98715804620696,
          175.8576702287554,
          180.42583140784728,
          176.58476125889447,
          176.7047167642029,
          176.629453753223,
          176.79218747506363,
          178.98892788841792,
          177.27576958430805,
          181.3722848842412,
          187.98498406659837,
          181.93843359268575,
          177.26104108168482,
          176.52071108589715,
          182.49155711926113,
          182.7631132439838,
          183.58903098425242,
          180.55611831951288,
          183.15960821906717,
          178.32795343866115,
          177.95677288231144,
          180.1783980921645,
          184.46072184982057,
          187.37985488830066,
          186.89181732454625,
          184.35605298520173,
          183.20591329747046,
          184.03454324915072,
          181.23482659114984,
          185.28308403112777,
          189.16027653598744,
          187.76079912385035,
          182.08918672692894,
          184.05516527220698,
          184.1045988444697,
          184.09811473061555,
          188.2742807332597,
          186.25346225897098,
          192.35640940475344,
          190.37176512527853,
          187.43031835514148,
          182.06941635191063,
          186.01022274686642,
          187.17014109163384,
          190.4715469377903,
          188.81181353369956,
          189.8358369732768,
          182.72228805707425,
          184.8050781012489,
          186.1383816943866,
          193.24578602672716,
          200.8065288227123,
          194.28828736467864,
          193.81482901672726,
          186.72836160600852,
          192.241076586169,
          186.92458582777633,
          190.33443214970427,
          193.64506108926318,
          193.4757070383109,
          198.07475768687019,
          190.63529094258791,
          193.85634688845957,
          192.40378033432864,
          196.09341230051135,
          201.75862491627552,
          199.28915953937863,
          199.50299860641857,
          194.7798744390873,
          192.6930896572654,
          194.52637761978423,
          199.57456586568253,
          202.71386899811918,
          198.19611966729394,
          200.0456645214347,
          195.49316233983916,
          195.72048739434462,
          194.71501535156486,
          196.37833826643944,
          203.62305490743253,
          200.7344682108663,
          199.03073803795746,
          198.75534186127825,
          203.32067022458855,
          195.7720635168707,
          199.90835707341148,
          204.96448344220323,
          205.10244268495572,
          202.35776136571215,
          200.726934794215,
          197.88676766309004,
          197.8331493539575,
          205.6379566001647,
          206.51554360133147,
          208.94250447638012,
          205.51340176751128,
          206.3942296531184,
          203.44377183130763,
          200.8913024543273,
          205.62054818185584,
          211.9284716425901,
          207.6637646546761,
          203.98172086654597,
          205.98265147159327,
          206.1726349573664,
          203.31453698455744,
          205.43008523836997,
          212.2256785051501,
          209.77312512015135,
          207.69076004023844,
          208.31418445663164,
          204.4288684167982,
          203.99818430544525,
          214.42118465046963,
          214.13421924970663,
          214.53706699286772,
          211.12539177908815,
          207.25760043859512,
          208.31378923543937,
          207.7581937625402,
          214.97721481304055,
          215.82559269066624,
          213.22045170391348,
          212.9203615631113,
          211.56979973711722,
          209.2304924943715,
          210.8322586252358,
          213.60859894025384,
          220.67558573410312,
          216.84398932313584,
          215.89993900588635,
          216.45877009417683,
          213.16139769783862,
          215.05231583040515,
          215.954379049422,
          219.8863913607121,
          221.40837309573277,
          217.5060143886973,
          216.20635661797888,
          219.67830079741876,
          216.03256328613747,
          222.7518617598126,
          222.93957260134334,
          222.69296925643752,
          220.52807673653177,
          214.8152945971805,
          219.35996162312384,
          221.26001791010955,
          218.5966286798421,
          222.4664943618798,
          226.01177746899668,
          223.89189649839983,
          221.62040913816824,
          219.26981377152651,
          221.30482893772452,
          222.7117654398928,
          227.80259963930465,
          230.42057232160838,
          226.3480202118702,
          229.0593694926144,
          225.05228201940673,
          224.81129905145923,
          226.84505396946966,
          231.7624993233332,
          233.2887738291909,
          229.0733090765045,
          225.81086564333862,
          226.00276808443675,
          228.32474955468726,
          229.3019678912529,
          235.83858171825764,
          232.99348149446334,
          232.08335190766633,
          227.74182005634702,
          230.45728875759843,
          230.67404287160272,
          229.50814271758875,
          235.7183822341356,
          236.40047526852823,
          232.37312873631768,
          229.2665617236331,
          226.68031718732917,
          229.53103729372697,
          235.63428167338503,
          237.80494900850638,
          240.0920971426893,
          236.7010916874573,
          235.4248363162822,
          237.30566746063883,
          233.13723379710953,
          236.5552008679365,
          239.89686700763409,
          244.9096036490923,
          237.26318021880311,
          235.2203128056023,
          238.47423964894884,
          235.15828619761484,
          239.34193278382634,
          245.16830414171588,
          245.73763745924688,
          239.48570918449084,
          237.76168743702013,
          238.21362507195306,
          238.1475996854584,
          239.53858588667305,
          248.9774585364927,
          248.371811218992,
          245.05503515893355,
          244.30023728122958,
          238.7489127496332,
          241.2890314887515,
          242.5035277430811,
          246.91925523513214,
          250.1697529213732,
          243.92664659060236,
          241.8478666883301,
          243.15442110486245,
          243.03602537544754,
          250.7844359634038,
          247.037719026462,
          253.66781574755956,
          249.45737058671747,
          246.67934201851935,
          247.86070849917633,
          250.3169519278247,
          251.90852670701057,
          255.46142564631478,
          255.24893567654163,
          248.99207503735315,
          250.06270940919183,
          249.8407640775357,
          249.98975359877406,
          249.84797441794748,
          260.09602432030164,
          255.2363489414685,
          253.8196170089542,
          252.8605047866715,
          250.12606585374448,
          250.4457385620164,
          255.66439628976198,
          257.1171366234853,
          260.4710266034294,
          254.62556673608796,
          258.0696214821964,
          251.63112941660282,
          256.03085174241767,
          255.42251780187377,
          262.49500527817486,
          268.4467462262814,
          261.95700243573685,
          254.1624803442787,
          256.59757033589017,
          257.0843143306484,
          263.4198589511652,
          268.42370186112487,
          265.6489292266733,
          262.7603675778577,
          262.09599969589374,
          261.59074479691736,
          262.8833387310333,
          261.87369991629896,
          268.2750282337539,
          265.80525498527817,
          265.89343025447374,
          262.25532718686435,
          262.1655981693268,
          265.34562193498107,
          268.6434338772699,
          273.7823312829554,
          270.3030635434866,
          270.5256404061442,
          264.3041896863698,
          268.31052865759534,
          267.1083365462491,
          275.6046633534177,
          273.41815843929714,
          275.1969887391214,
          270.0982463826942,
          272.6707120503058,
          268.1608009890992,
          269.16929371013543,
          268.83807050408825,
          276.3559986944574,
          273.13305737052735,
          273.17528890696093,
          271.90337524307506,
          272.3212925446248,
          273.99755602119666,
          276.54823895569723,
          282.9140012130516,
          278.0587207279706,
          277.2388898466025,
          275.90443193311097,
          278.40900456393456,
          273.8906911572586,
          278.6621422987277,
          282.5506791811139,
          282.8549333842059,
          281.0861352461792,
          279.4443667919478,
          277.28255778975034,
          278.9371783350688,
          282.6453102959653,
          290.7186568347336,
          284.87379057132296,
          283.58052655058395,
          279.9218473059673,
          285.2645998915625,
          281.0675810948122,
          285.71718834150687,
          287.48384144082,
          288.27263719907677,
          286.19892556555106,
          283.3883206932136
         ]
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "white",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "white",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "#C8D4E3",
             "linecolor": "#C8D4E3",
             "minorgridcolor": "#C8D4E3",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "#C8D4E3",
             "linecolor": "#C8D4E3",
             "minorgridcolor": "#C8D4E3",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "white",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "#C8D4E3"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "white",
          "polar": {
           "angularaxis": {
            "gridcolor": "#EBF0F8",
            "linecolor": "#EBF0F8",
            "ticks": ""
           },
           "bgcolor": "white",
           "radialaxis": {
            "gridcolor": "#EBF0F8",
            "linecolor": "#EBF0F8",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "white",
            "gridcolor": "#DFE8F3",
            "gridwidth": 2,
            "linecolor": "#EBF0F8",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#EBF0F8"
           },
           "yaxis": {
            "backgroundcolor": "white",
            "gridcolor": "#DFE8F3",
            "gridwidth": 2,
            "linecolor": "#EBF0F8",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#EBF0F8"
           },
           "zaxis": {
            "backgroundcolor": "white",
            "gridcolor": "#DFE8F3",
            "gridwidth": 2,
            "linecolor": "#EBF0F8",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#EBF0F8"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "#DFE8F3",
            "linecolor": "#A2B1C6",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "#DFE8F3",
            "linecolor": "#A2B1C6",
            "ticks": ""
           },
           "bgcolor": "white",
           "caxis": {
            "gridcolor": "#DFE8F3",
            "linecolor": "#A2B1C6",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "#EBF0F8",
           "linecolor": "#EBF0F8",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#EBF0F8",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "#EBF0F8",
           "linecolor": "#EBF0F8",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#EBF0F8",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Prophet Forecast with Uncertainty Interval"
        },
        "xaxis": {
         "title": {
          "text": "Date"
         }
        },
        "yaxis": {
         "title": {
          "text": "Predicted Value"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"77715f9c-a362-477f-905a-e1938872257e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"77715f9c-a362-477f-905a-e1938872257e\")) {                    Plotly.newPlot(                        \"77715f9c-a362-477f-905a-e1938872257e\",                        [{\"line\":{\"color\":\"green\"},\"mode\":\"lines\",\"name\":\"Predicted Value\",\"x\":[\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-01\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-06\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-17\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\",\"2024-01-01\",\"2024-01-02\",\"2024-01-03\",\"2024-01-04\",\"2024-01-05\",\"2024-01-06\",\"2024-01-07\",\"2024-01-08\",\"2024-01-09\",\"2024-01-10\",\"2024-01-11\",\"2024-01-12\",\"2024-01-13\",\"2024-01-14\",\"2024-01-15\",\"2024-01-16\",\"2024-01-17\",\"2024-01-18\",\"2024-01-19\",\"2024-01-20\",\"2024-01-21\",\"2024-01-22\",\"2024-01-23\",\"2024-01-24\",\"2024-01-25\",\"2024-01-26\",\"2024-01-27\",\"2024-01-28\",\"2024-01-29\",\"2024-01-30\",\"2024-01-31\",\"2024-02-01\",\"2024-02-02\",\"2024-02-03\",\"2024-02-04\",\"2024-02-05\",\"2024-02-06\",\"2024-02-07\",\"2024-02-08\",\"2024-02-09\",\"2024-02-10\",\"2024-02-11\",\"2024-02-12\",\"2024-02-13\",\"2024-02-14\",\"2024-02-15\",\"2024-02-16\",\"2024-02-17\",\"2024-02-18\",\"2024-02-19\",\"2024-02-20\",\"2024-02-21\",\"2024-02-22\",\"2024-02-23\",\"2024-02-24\",\"2024-02-25\",\"2024-02-26\",\"2024-02-27\",\"2024-02-28\",\"2024-02-29\",\"2024-03-01\",\"2024-03-02\",\"2024-03-03\",\"2024-03-04\",\"2024-03-05\",\"2024-03-06\",\"2024-03-07\",\"2024-03-08\",\"2024-03-09\",\"2024-03-10\",\"2024-03-11\",\"2024-03-12\",\"2024-03-13\",\"2024-03-14\",\"2024-03-15\",\"2024-03-16\",\"2024-03-17\",\"2024-03-18\",\"2024-03-19\",\"2024-03-20\",\"2024-03-21\",\"2024-03-22\",\"2024-03-23\",\"2024-03-24\",\"2024-03-25\",\"2024-03-26\",\"2024-03-27\",\"2024-03-28\",\"2024-03-29\",\"2024-03-30\",\"2024-03-31\",\"2024-04-01\",\"2024-04-02\",\"2024-04-03\",\"2024-04-04\",\"2024-04-05\",\"2024-04-06\",\"2024-04-07\",\"2024-04-08\",\"2024-04-09\",\"2024-04-10\",\"2024-04-11\",\"2024-04-12\",\"2024-04-13\",\"2024-04-14\",\"2024-04-15\",\"2024-04-16\",\"2024-04-17\",\"2024-04-18\",\"2024-04-19\",\"2024-04-20\",\"2024-04-21\",\"2024-04-22\",\"2024-04-23\",\"2024-04-24\",\"2024-04-25\",\"2024-04-26\",\"2024-04-27\",\"2024-04-28\",\"2024-04-29\",\"2024-04-30\",\"2024-05-01\",\"2024-05-02\",\"2024-05-03\",\"2024-05-04\",\"2024-05-05\",\"2024-05-06\",\"2024-05-07\",\"2024-05-08\",\"2024-05-09\",\"2024-05-10\",\"2024-05-11\",\"2024-05-12\",\"2024-05-13\",\"2024-05-14\",\"2024-05-15\",\"2024-05-16\",\"2024-05-17\",\"2024-05-18\",\"2024-05-19\",\"2024-05-20\",\"2024-05-21\",\"2024-05-22\",\"2024-05-23\",\"2024-05-24\",\"2024-05-25\",\"2024-05-26\",\"2024-05-27\",\"2024-05-28\",\"2024-05-29\",\"2024-05-30\",\"2024-05-31\",\"2024-06-01\",\"2024-06-02\",\"2024-06-03\",\"2024-06-04\",\"2024-06-05\",\"2024-06-06\",\"2024-06-07\",\"2024-06-08\",\"2024-06-09\",\"2024-06-10\",\"2024-06-11\",\"2024-06-12\",\"2024-06-13\",\"2024-06-14\",\"2024-06-15\",\"2024-06-16\",\"2024-06-17\",\"2024-06-18\",\"2024-06-19\",\"2024-06-20\",\"2024-06-21\",\"2024-06-22\",\"2024-06-23\",\"2024-06-24\",\"2024-06-25\",\"2024-06-26\",\"2024-06-27\",\"2024-06-28\",\"2024-06-29\",\"2024-06-30\",\"2024-07-01\",\"2024-07-02\",\"2024-07-03\",\"2024-07-04\",\"2024-07-05\",\"2024-07-06\",\"2024-07-07\",\"2024-07-08\",\"2024-07-09\",\"2024-07-10\",\"2024-07-11\",\"2024-07-12\",\"2024-07-13\",\"2024-07-14\",\"2024-07-15\",\"2024-07-16\",\"2024-07-17\",\"2024-07-18\",\"2024-07-19\",\"2024-07-20\",\"2024-07-21\",\"2024-07-22\",\"2024-07-23\",\"2024-07-24\",\"2024-07-25\",\"2024-07-26\",\"2024-07-27\",\"2024-07-28\",\"2024-07-29\",\"2024-07-30\",\"2024-07-31\",\"2024-08-01\",\"2024-08-02\",\"2024-08-03\",\"2024-08-04\",\"2024-08-05\",\"2024-08-06\",\"2024-08-07\",\"2024-08-08\",\"2024-08-09\",\"2024-08-10\",\"2024-08-11\",\"2024-08-12\",\"2024-08-13\",\"2024-08-14\",\"2024-08-15\",\"2024-08-16\",\"2024-08-17\",\"2024-08-18\",\"2024-08-19\",\"2024-08-20\",\"2024-08-21\",\"2024-08-22\",\"2024-08-23\",\"2024-08-24\",\"2024-08-25\",\"2024-08-26\",\"2024-08-27\",\"2024-08-28\",\"2024-08-29\",\"2024-08-30\",\"2024-08-31\",\"2024-09-01\",\"2024-09-02\",\"2024-09-03\",\"2024-09-04\",\"2024-09-05\",\"2024-09-06\",\"2024-09-07\",\"2024-09-08\",\"2024-09-09\",\"2024-09-10\",\"2024-09-11\",\"2024-09-12\",\"2024-09-13\",\"2024-09-14\",\"2024-09-15\",\"2024-09-16\",\"2024-09-17\",\"2024-09-18\",\"2024-09-19\",\"2024-09-20\",\"2024-09-21\",\"2024-09-22\",\"2024-09-23\",\"2024-09-24\",\"2024-09-25\",\"2024-09-26\",\"2024-09-27\",\"2024-09-28\",\"2024-09-29\",\"2024-09-30\",\"2024-10-01\",\"2024-10-02\",\"2024-10-03\",\"2024-10-04\",\"2024-10-05\",\"2024-10-06\",\"2024-10-07\",\"2024-10-08\",\"2024-10-09\",\"2024-10-10\"],\"y\":[114.74237138573545,114.99671428241955,117.74567603840055,122.31614782462599,121.83946943679268,119.11338956179964,116.94598733436388,116.60579150480307,116.86013440148909,119.60909615746874,124.17956794369454,123.70288955586831,120.9768096808647,118.80940745342848,118.46921162386886,118.72355452055524,121.47251627653952,126.04298806276316,125.56630967493273,122.84022979992764,120.67282757249643,120.33263174293458,120.5869746396188,123.33593639559065,127.90640818183114,127.42972979399745,124.7036499189927,122.53624769156526,122.19605186200032,122.45039475868488,125.19935651466136,129.7698283009003,129.29314991306225,126.56707003806999,124.3996678106315,124.05947198106794,124.31381487775275,127.0627766337321,131.63324841995853,131.15657003212704,128.43049015713405,126.26308792969616,125.92289210013183,126.17723499682046,128.9261967528004,133.49666853902707,133.01999015119148,130.293910276198,128.12650804876077,127.78631221920213,128.0406551158859,130.7896168718711,135.36008865809512,134.88341027025655,132.1573303952752,129.98992816782865,129.64973233826788,129.90407523495196,132.65303699094056,137.22350877716315,136.74683038933185,134.02075051433928,131.85334828689335,131.51315245733556,131.7674953540198,134.516457109993,139.08692889623222,138.61025050839692,135.88417063340432,133.71676840595953,133.37657257640313,133.6309154730859,136.37987722906243,140.9503490153002,140.4736706274614,137.7475907524684,135.58018852503005,135.23999269546704,135.4943355921555,138.24329734813318,142.81376913436878,142.33709074653697,139.61101087153347,137.44360864409634,137.10341281453358,137.3577557112215,140.10671746720269,144.6771892534276,144.2005108656017,141.47443099059637,139.30702876316101,138.96683293360118,139.22117583028515,141.97013758627338,146.54060937249614,146.0639309846665,143.33785110966159,141.17044888222728,140.83025305266884,141.08459594935294,143.83355770534155,148.40402949156464,147.92735110373093,145.2012712287388,143.03386900129186,142.6936731717346,142.9480160684208,145.69697782441236,150.26744961062352,149.79077122279546,147.06469134780275,144.8972891203657,144.55709329080037,144.8114361874869,147.5603979434647,152.13086972969148,151.65419134186016,148.92811146686677,146.76070923943027,146.4205134098688,146.67485630655295,149.42381806253422,153.99428984876056,153.51761146092497,150.79153158593192,148.62412935849656,148.28393352893642,148.5382764256208,151.28723818160375,155.85770996782864,155.38103158000055,152.65495170499696,150.48754947756117,150.1473536480003,150.40169654468863,153.1506583006561,157.72113008689718,157.24445169906505,154.51837182407317,152.35096959662746,152.01077376706792,152.2651166637522,155.0140784197256,159.5845502059652,159.1078718181301,156.38179194313608,154.21438971569796,153.87419388613364,154.1285367828183,156.87749853879632,161.4479703250338,160.97129193719456,158.24521206220123,156.07780983476425,155.73761400520124,155.99195690188787,158.7409186578645,163.31139044409264,162.83471205625938,160.10863218126627,157.9412299538289,157.601034124267,157.85537702094976,160.60433877693526,165.17481056316112,164.69813217532382,161.9720523003303,159.80465007289675,159.4644542433354,159.71879714001932,162.46775889600596,167.03823068222917,166.5615522943997,163.83547241940866,161.66807019196142,161.32787436240122,161.58221725908533,164.33117901507546,168.90165080129822,168.42497241346445,165.69889253847157,163.531490311026,163.19129448146694,163.4456373781532,166.19459913412916,170.7650709203662,170.28839253252926,167.5623126575367,165.39491043009224,165.05471460053533,165.3090574972211,168.05801925319733,172.62849103943424,172.15181265159364,169.42573277660068,167.25833054916114,166.91813471960296,167.17247761628877,169.92143937226808,174.49191115849362,174.0152327706693,171.28915289566467,169.12175066822903,168.78155483866684,169.03589773535495,171.7848594913376,176.35533127756162,175.87865288973376,173.15257301472874,170.98517078729367,170.6449749577344,170.8993178544186,173.64827961040703,178.2187513966307,177.7420730087988,175.01599313379373,172.8485909063658,172.5083950768021,172.76273797348463,175.51169972947656,180.08217151569878,179.6054931278632,176.87941325287093,174.7120110254304,174.37181519586602,174.6261580925542,177.37511984852893,181.9455916347576,181.46891324692768,178.74283337193611,176.5754311444967,176.23523531493362,176.4895782116203,179.23853996759843,183.80901175382556,183.33233336599278,180.60625349099902,178.43885126356298,178.09865543400204,178.35299833068638,181.10196008666918,185.6724318728941,185.1957534850572,182.46967361007626,180.30227138262927,179.96207555306967,180.21641844975593,182.96538020573735,187.5358519919627,187.0591736041329,184.33309372914033,182.1656915016939,181.8254956721354,182.07983856882203,184.828800324791,189.3992721110312,188.92259372319734,186.19651384820537,184.0291116207618,183.68891579120117,183.9432586878873,186.6922204438605,191.2626922300993,190.7860138422621,188.05993396727052,185.89253173983067,185.55233591026695,185.80667880695347,188.55564056293116,193.12611234916824,192.649433961338,189.9233540863334,187.7559518588969,187.4157560293346,187.67009892602127,190.41906068200197,194.98953246822668,194.5128540804028,191.78677420539853,189.61937197796158,189.27917614839845,189.53351904508492,192.28248080107022,196.85295258729514,196.37627419946725,193.65019432446252,191.48279209702616,191.14259626746878,191.39693916415274,194.1459009201409,198.7163727063632,198.23969431853203,195.51361444353978,193.34621221609407,193.00601638653262,193.26035928321875,196.0093210392104,200.5797928254312,200.10311443759647,197.3770345626038,195.2096323351587,194.86943650560016,195.12377940228657,197.87274115826284,202.44321294449102,201.96653455666154,199.2404546816689,197.07305245422495,196.73285662466864,196.9871995213527,199.73616127733223,204.30663306355962,203.82995467572604,201.1038748007329,198.93647257329545,198.59627674373442,198.85061964042225,201.59958139640298,206.17005318262764,205.6933747948016,202.96729491979804,200.79989269236177,200.45969686280014,200.71403975948832,203.46300151547254,208.0334733016957,207.55679491386638,204.830715038861,202.663312811428,202.32311698186783,202.57745987855196,205.32642163452488,209.8968934207643,209.42021503293114,206.6941351579261,204.52673293049853,204.18653710093542,204.4408799976198,207.18984175359316,211.76031353983285,211.2836351519956,208.55755527700333,206.3901530495631,206.04995722000115,206.3043001166876,209.05326187266382,213.62373365889158,213.14705527105997,210.4209753960673,208.25357316863102,207.91337733906687,208.16772023575368,210.91668199173336,215.48715377795963,215.01047539012478,212.28439551513134,210.11699328769566,209.77679745813532,210.03114035481977,212.780102110804,217.3505738970287,216.87389550918948,214.14781563420854,211.98041340676195],\"type\":\"scatter\"},{\"line\":{\"color\":\"lightgray\"},\"mode\":\"lines\",\"name\":\"Uncertainty Interval Lower\",\"x\":[\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-01\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-06\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-17\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\",\"2024-01-01\",\"2024-01-02\",\"2024-01-03\",\"2024-01-04\",\"2024-01-05\",\"2024-01-06\",\"2024-01-07\",\"2024-01-08\",\"2024-01-09\",\"2024-01-10\",\"2024-01-11\",\"2024-01-12\",\"2024-01-13\",\"2024-01-14\",\"2024-01-15\",\"2024-01-16\",\"2024-01-17\",\"2024-01-18\",\"2024-01-19\",\"2024-01-20\",\"2024-01-21\",\"2024-01-22\",\"2024-01-23\",\"2024-01-24\",\"2024-01-25\",\"2024-01-26\",\"2024-01-27\",\"2024-01-28\",\"2024-01-29\",\"2024-01-30\",\"2024-01-31\",\"2024-02-01\",\"2024-02-02\",\"2024-02-03\",\"2024-02-04\",\"2024-02-05\",\"2024-02-06\",\"2024-02-07\",\"2024-02-08\",\"2024-02-09\",\"2024-02-10\",\"2024-02-11\",\"2024-02-12\",\"2024-02-13\",\"2024-02-14\",\"2024-02-15\",\"2024-02-16\",\"2024-02-17\",\"2024-02-18\",\"2024-02-19\",\"2024-02-20\",\"2024-02-21\",\"2024-02-22\",\"2024-02-23\",\"2024-02-24\",\"2024-02-25\",\"2024-02-26\",\"2024-02-27\",\"2024-02-28\",\"2024-02-29\",\"2024-03-01\",\"2024-03-02\",\"2024-03-03\",\"2024-03-04\",\"2024-03-05\",\"2024-03-06\",\"2024-03-07\",\"2024-03-08\",\"2024-03-09\",\"2024-03-10\",\"2024-03-11\",\"2024-03-12\",\"2024-03-13\",\"2024-03-14\",\"2024-03-15\",\"2024-03-16\",\"2024-03-17\",\"2024-03-18\",\"2024-03-19\",\"2024-03-20\",\"2024-03-21\",\"2024-03-22\",\"2024-03-23\",\"2024-03-24\",\"2024-03-25\",\"2024-03-26\",\"2024-03-27\",\"2024-03-28\",\"2024-03-29\",\"2024-03-30\",\"2024-03-31\",\"2024-04-01\",\"2024-04-02\",\"2024-04-03\",\"2024-04-04\",\"2024-04-05\",\"2024-04-06\",\"2024-04-07\",\"2024-04-08\",\"2024-04-09\",\"2024-04-10\",\"2024-04-11\",\"2024-04-12\",\"2024-04-13\",\"2024-04-14\",\"2024-04-15\",\"2024-04-16\",\"2024-04-17\",\"2024-04-18\",\"2024-04-19\",\"2024-04-20\",\"2024-04-21\",\"2024-04-22\",\"2024-04-23\",\"2024-04-24\",\"2024-04-25\",\"2024-04-26\",\"2024-04-27\",\"2024-04-28\",\"2024-04-29\",\"2024-04-30\",\"2024-05-01\",\"2024-05-02\",\"2024-05-03\",\"2024-05-04\",\"2024-05-05\",\"2024-05-06\",\"2024-05-07\",\"2024-05-08\",\"2024-05-09\",\"2024-05-10\",\"2024-05-11\",\"2024-05-12\",\"2024-05-13\",\"2024-05-14\",\"2024-05-15\",\"2024-05-16\",\"2024-05-17\",\"2024-05-18\",\"2024-05-19\",\"2024-05-20\",\"2024-05-21\",\"2024-05-22\",\"2024-05-23\",\"2024-05-24\",\"2024-05-25\",\"2024-05-26\",\"2024-05-27\",\"2024-05-28\",\"2024-05-29\",\"2024-05-30\",\"2024-05-31\",\"2024-06-01\",\"2024-06-02\",\"2024-06-03\",\"2024-06-04\",\"2024-06-05\",\"2024-06-06\",\"2024-06-07\",\"2024-06-08\",\"2024-06-09\",\"2024-06-10\",\"2024-06-11\",\"2024-06-12\",\"2024-06-13\",\"2024-06-14\",\"2024-06-15\",\"2024-06-16\",\"2024-06-17\",\"2024-06-18\",\"2024-06-19\",\"2024-06-20\",\"2024-06-21\",\"2024-06-22\",\"2024-06-23\",\"2024-06-24\",\"2024-06-25\",\"2024-06-26\",\"2024-06-27\",\"2024-06-28\",\"2024-06-29\",\"2024-06-30\",\"2024-07-01\",\"2024-07-02\",\"2024-07-03\",\"2024-07-04\",\"2024-07-05\",\"2024-07-06\",\"2024-07-07\",\"2024-07-08\",\"2024-07-09\",\"2024-07-10\",\"2024-07-11\",\"2024-07-12\",\"2024-07-13\",\"2024-07-14\",\"2024-07-15\",\"2024-07-16\",\"2024-07-17\",\"2024-07-18\",\"2024-07-19\",\"2024-07-20\",\"2024-07-21\",\"2024-07-22\",\"2024-07-23\",\"2024-07-24\",\"2024-07-25\",\"2024-07-26\",\"2024-07-27\",\"2024-07-28\",\"2024-07-29\",\"2024-07-30\",\"2024-07-31\",\"2024-08-01\",\"2024-08-02\",\"2024-08-03\",\"2024-08-04\",\"2024-08-05\",\"2024-08-06\",\"2024-08-07\",\"2024-08-08\",\"2024-08-09\",\"2024-08-10\",\"2024-08-11\",\"2024-08-12\",\"2024-08-13\",\"2024-08-14\",\"2024-08-15\",\"2024-08-16\",\"2024-08-17\",\"2024-08-18\",\"2024-08-19\",\"2024-08-20\",\"2024-08-21\",\"2024-08-22\",\"2024-08-23\",\"2024-08-24\",\"2024-08-25\",\"2024-08-26\",\"2024-08-27\",\"2024-08-28\",\"2024-08-29\",\"2024-08-30\",\"2024-08-31\",\"2024-09-01\",\"2024-09-02\",\"2024-09-03\",\"2024-09-04\",\"2024-09-05\",\"2024-09-06\",\"2024-09-07\",\"2024-09-08\",\"2024-09-09\",\"2024-09-10\",\"2024-09-11\",\"2024-09-12\",\"2024-09-13\",\"2024-09-14\",\"2024-09-15\",\"2024-09-16\",\"2024-09-17\",\"2024-09-18\",\"2024-09-19\",\"2024-09-20\",\"2024-09-21\",\"2024-09-22\",\"2024-09-23\",\"2024-09-24\",\"2024-09-25\",\"2024-09-26\",\"2024-09-27\",\"2024-09-28\",\"2024-09-29\",\"2024-09-30\",\"2024-10-01\",\"2024-10-02\",\"2024-10-03\",\"2024-10-04\",\"2024-10-05\",\"2024-10-06\",\"2024-10-07\",\"2024-10-08\",\"2024-10-09\",\"2024-10-10\"],\"y\":[67.59973457056365,69.75329369268239,73.56830226332798,78.39293416338955,77.72290395169215,76.84441099784789,73.4004690773922,68.86015441273538,69.05939166534868,75.53905414273207,79.77327190985207,77.75777636989142,74.47564837401589,73.25220062343786,73.19921317349898,73.95551050930801,73.80005873304847,81.13067159809086,76.10821712279723,78.0136979546659,76.83912973937369,75.10825745144487,74.89244780444099,80.53111092252337,80.90313205822137,82.39860617662124,82.9852274551156,78.54426343664946,76.37088255799056,75.62270930071473,78.44423473314387,83.31794028288996,81.08813231123852,77.42891831061914,80.4999734635517,77.49952124079071,79.2905788952003,78.98312717215019,88.81328044137572,84.30076050515069,81.58100118412993,79.9637769050739,80.38116370899711,80.20216056393348,82.93894798291399,88.31570654233907,91.62551823194524,82.5570661496501,81.53611756523651,79.68155732683942,82.49979676856216,83.34502353182872,88.64898050530209,89.7233504132587,85.43133819634083,85.44648049832078,81.61949376350282,89.20937506490249,88.78193480009779,89.95166719015114,87.42146097299427,86.3661027148834,87.0435100609161,85.6103416383881,84.33770061631695,89.80125911478125,92.40652962955079,93.28011015310287,91.59010707416917,88.71054062566215,86.00137339448091,86.67494502813817,88.97341728536718,95.33771274797556,93.24095380459659,91.3315881274282,91.00698922836641,89.40528044462808,89.56147358791105,95.61906581296792,92.54612131693929,97.43995711309014,90.98503646400432,91.56703006478504,88.75111922905118,90.8020036381119,93.77520005280445,97.86885987494341,98.8172426564179,97.86197819327157,90.8968562661031,92.39604718159386,93.00585485799978,90.77657561186528,102.5016255079323,99.62958196602023,94.58598362938179,94.07116207569428,91.36555413610122,97.16313715715535,94.06675462623087,104.73353409360584,100.6367028916755,96.24024326973657,99.6975387118364,96.70675664430438,98.90335355758823,101.29410847932921,103.66463663923929,103.10431094846503,102.2084915042184,98.02708705754117,92.20585510250166,96.24305824016847,101.4417319973802,106.93416788041247,103.55909409030508,99.7867921340186,97.45244044346303,98.63424178281791,99.90170908120923,101.13807698430091,109.34692033339815,105.72768182779889,105.60400572877981,100.46181388447361,103.91205398145186,104.57959267921586,104.04435682325217,107.86478259741452,108.0187775644969,109.18406565399047,101.72664903880428,103.93246779921348,98.77289798649254,105.26820563895443,111.03606011844128,110.23685281552393,105.04598201967958,100.27062533335715,105.05034119546318,103.48242908898135,106.53213415654211,114.43410970232202,113.13401835782282,105.86637562083473,106.56088615010849,107.54354102080698,107.64944949352933,104.84739900665984,113.93510233767303,112.91155873897279,110.29972979190467,108.13295184811746,108.10740780962469,108.09057540384919,111.18992805274829,112.25258717996223,111.92357658117785,109.26519955926254,111.79978973804548,108.51058145343865,108.4480186571405,107.13552537729038,117.9094841352388,114.61252965719076,112.37455442066174,107.95030573917623,110.27411685755159,113.05571108542163,113.91897867131757,116.19108612164193,117.5267693176626,114.66169581175336,113.61399717622054,110.67339719110454,108.56495852366659,114.30395405358459,119.1764379210695,114.96949146873918,112.75826023594097,114.270237468382,111.67628497727631,114.66766048958604,114.1294997519559,119.44288520414882,118.94204255392032,115.3369560739508,113.27935192178755,110.93065437683339,115.85019327081349,111.3731940371964,123.06331316676527,124.38886536158759,120.37799303887525,112.13015735486444,117.11511221320836,113.93678704110151,118.21292671407808,121.6741893845544,121.85007577619841,113.26109377357096,116.21983569327972,111.62284425456382,115.01759321070763,118.71407696504507,125.74627615395416,125.85363155401018,119.76022952667257,117.59623732786015,118.54686260051928,117.62415409068993,124.16836489105631,123.8663456259253,122.3829256257585,121.55487963091473,120.8196929764833,120.76013132313749,117.61241458404233,121.92752184642832,125.92791803745776,122.73433510212006,119.02391028880503,120.81806718214021,117.41803425192766,120.03889951637319,127.10149924458547,129.44643856085483,121.76756606340632,118.82226352126396,121.93955741980506,123.321954418923,118.80668316697127,126.93520137521607,125.73214666603202,129.3473065371293,128.70239942657022,119.9347872443051,120.52787101132364,119.41660816079687,125.63496506496261,129.08148890428166,123.8359258111172,125.82503899894168,124.13582775442951,122.98135350470363,119.15385079744276,121.97750832371771,129.83105810340834,130.580773099613,126.93957674087426,127.1492953482608,121.18829023532793,123.8417160238825,125.81006956069938,134.88343138292169,129.2719009514391,127.96662295324688,126.1671348181764,123.25216061287091,126.89666838594553,127.41456518207009,134.60207600924107,133.37172784363227,127.52851272214362,128.59625830003407,123.38332636323382,124.60131254994883,129.72317449337257,132.48335344540303,129.5965846620435,128.3252684478835,129.9954634952371,122.58378132639916,126.51499403744333,131.76270958081952,133.75070170930687,136.15465439388169,129.52887512267236,128.715151560064,132.534528917315,126.35100856976021,129.5789458244082,138.5810821928916,136.71064556617554,131.8444180028714,130.23055254344968,124.17606487342553,129.5632395819779,130.48171351476935,134.25356116999413,133.11032044060738,134.1596749699571,130.87196063446132,127.56094192307842,130.25616158385867,133.5828838011068,133.31664979118318,135.0275193148101,133.1526852320213,127.86324547191792,134.6897373809295,128.1882854599272,133.84627305041306,137.15651551351522,135.69114263647637,134.56339366700547,130.00273545112583,131.1721237486166,131.735541014622,134.19476435627544,138.28497175076328,138.9173581802217,133.656288922427,134.41305474149118,125.99108716591894,134.04218647713813,133.97990156343226,140.17850805583564,138.27931626917774,137.13439044934069,130.62499152983983,136.79321728454636,128.70655585963343,137.35509859380178,136.327972651947,139.8445759728947,136.53234998241822,132.8480724751094,127.5032999703125,135.74998556267064,137.93024474813686,141.8132524555725,140.99483514227117,139.05898732257631,136.31850211500176,135.8911832825169,136.409861639182,137.66149130028646,140.99407478059845,139.7317260504086,137.60384578382434,135.13526951654646,135.51414852288286,132.7904397171718,138.445642773679,142.32793655772167,136.18178787272532,137.9797799539096,132.72846549710798,137.05880397376777,133.09241822933717,135.80732225460625,139.0464475581603,140.92258755165565,137.83557578782236,134.85912569701446,133.5629945303774,134.6007541365038,132.92992367099373,140.68591287162732,139.36430437535182,143.09815967866788,137.43715215259692],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"line\":{\"color\":\"lightgray\"},\"mode\":\"lines\",\"name\":\"Uncertainty Interval Higher\",\"x\":[\"2023-10-13\",\"2023-10-14\",\"2023-10-15\",\"2023-10-16\",\"2023-10-17\",\"2023-10-18\",\"2023-10-19\",\"2023-10-20\",\"2023-10-21\",\"2023-10-22\",\"2023-10-23\",\"2023-10-24\",\"2023-10-25\",\"2023-10-26\",\"2023-10-27\",\"2023-10-28\",\"2023-10-29\",\"2023-10-30\",\"2023-10-31\",\"2023-11-01\",\"2023-11-02\",\"2023-11-03\",\"2023-11-04\",\"2023-11-05\",\"2023-11-06\",\"2023-11-07\",\"2023-11-08\",\"2023-11-09\",\"2023-11-10\",\"2023-11-11\",\"2023-11-12\",\"2023-11-13\",\"2023-11-14\",\"2023-11-15\",\"2023-11-16\",\"2023-11-17\",\"2023-11-18\",\"2023-11-19\",\"2023-11-20\",\"2023-11-21\",\"2023-11-22\",\"2023-11-23\",\"2023-11-24\",\"2023-11-25\",\"2023-11-26\",\"2023-11-27\",\"2023-11-28\",\"2023-11-29\",\"2023-11-30\",\"2023-12-01\",\"2023-12-02\",\"2023-12-03\",\"2023-12-04\",\"2023-12-05\",\"2023-12-06\",\"2023-12-07\",\"2023-12-08\",\"2023-12-09\",\"2023-12-10\",\"2023-12-11\",\"2023-12-12\",\"2023-12-13\",\"2023-12-14\",\"2023-12-15\",\"2023-12-16\",\"2023-12-17\",\"2023-12-18\",\"2023-12-19\",\"2023-12-20\",\"2023-12-21\",\"2023-12-22\",\"2023-12-23\",\"2023-12-24\",\"2023-12-25\",\"2023-12-26\",\"2023-12-27\",\"2023-12-28\",\"2023-12-29\",\"2023-12-30\",\"2023-12-31\",\"2024-01-01\",\"2024-01-02\",\"2024-01-03\",\"2024-01-04\",\"2024-01-05\",\"2024-01-06\",\"2024-01-07\",\"2024-01-08\",\"2024-01-09\",\"2024-01-10\",\"2024-01-11\",\"2024-01-12\",\"2024-01-13\",\"2024-01-14\",\"2024-01-15\",\"2024-01-16\",\"2024-01-17\",\"2024-01-18\",\"2024-01-19\",\"2024-01-20\",\"2024-01-21\",\"2024-01-22\",\"2024-01-23\",\"2024-01-24\",\"2024-01-25\",\"2024-01-26\",\"2024-01-27\",\"2024-01-28\",\"2024-01-29\",\"2024-01-30\",\"2024-01-31\",\"2024-02-01\",\"2024-02-02\",\"2024-02-03\",\"2024-02-04\",\"2024-02-05\",\"2024-02-06\",\"2024-02-07\",\"2024-02-08\",\"2024-02-09\",\"2024-02-10\",\"2024-02-11\",\"2024-02-12\",\"2024-02-13\",\"2024-02-14\",\"2024-02-15\",\"2024-02-16\",\"2024-02-17\",\"2024-02-18\",\"2024-02-19\",\"2024-02-20\",\"2024-02-21\",\"2024-02-22\",\"2024-02-23\",\"2024-02-24\",\"2024-02-25\",\"2024-02-26\",\"2024-02-27\",\"2024-02-28\",\"2024-02-29\",\"2024-03-01\",\"2024-03-02\",\"2024-03-03\",\"2024-03-04\",\"2024-03-05\",\"2024-03-06\",\"2024-03-07\",\"2024-03-08\",\"2024-03-09\",\"2024-03-10\",\"2024-03-11\",\"2024-03-12\",\"2024-03-13\",\"2024-03-14\",\"2024-03-15\",\"2024-03-16\",\"2024-03-17\",\"2024-03-18\",\"2024-03-19\",\"2024-03-20\",\"2024-03-21\",\"2024-03-22\",\"2024-03-23\",\"2024-03-24\",\"2024-03-25\",\"2024-03-26\",\"2024-03-27\",\"2024-03-28\",\"2024-03-29\",\"2024-03-30\",\"2024-03-31\",\"2024-04-01\",\"2024-04-02\",\"2024-04-03\",\"2024-04-04\",\"2024-04-05\",\"2024-04-06\",\"2024-04-07\",\"2024-04-08\",\"2024-04-09\",\"2024-04-10\",\"2024-04-11\",\"2024-04-12\",\"2024-04-13\",\"2024-04-14\",\"2024-04-15\",\"2024-04-16\",\"2024-04-17\",\"2024-04-18\",\"2024-04-19\",\"2024-04-20\",\"2024-04-21\",\"2024-04-22\",\"2024-04-23\",\"2024-04-24\",\"2024-04-25\",\"2024-04-26\",\"2024-04-27\",\"2024-04-28\",\"2024-04-29\",\"2024-04-30\",\"2024-05-01\",\"2024-05-02\",\"2024-05-03\",\"2024-05-04\",\"2024-05-05\",\"2024-05-06\",\"2024-05-07\",\"2024-05-08\",\"2024-05-09\",\"2024-05-10\",\"2024-05-11\",\"2024-05-12\",\"2024-05-13\",\"2024-05-14\",\"2024-05-15\",\"2024-05-16\",\"2024-05-17\",\"2024-05-18\",\"2024-05-19\",\"2024-05-20\",\"2024-05-21\",\"2024-05-22\",\"2024-05-23\",\"2024-05-24\",\"2024-05-25\",\"2024-05-26\",\"2024-05-27\",\"2024-05-28\",\"2024-05-29\",\"2024-05-30\",\"2024-05-31\",\"2024-06-01\",\"2024-06-02\",\"2024-06-03\",\"2024-06-04\",\"2024-06-05\",\"2024-06-06\",\"2024-06-07\",\"2024-06-08\",\"2024-06-09\",\"2024-06-10\",\"2024-06-11\",\"2024-06-12\",\"2024-06-13\",\"2024-06-14\",\"2024-06-15\",\"2024-06-16\",\"2024-06-17\",\"2024-06-18\",\"2024-06-19\",\"2024-06-20\",\"2024-06-21\",\"2024-06-22\",\"2024-06-23\",\"2024-06-24\",\"2024-06-25\",\"2024-06-26\",\"2024-06-27\",\"2024-06-28\",\"2024-06-29\",\"2024-06-30\",\"2024-07-01\",\"2024-07-02\",\"2024-07-03\",\"2024-07-04\",\"2024-07-05\",\"2024-07-06\",\"2024-07-07\",\"2024-07-08\",\"2024-07-09\",\"2024-07-10\",\"2024-07-11\",\"2024-07-12\",\"2024-07-13\",\"2024-07-14\",\"2024-07-15\",\"2024-07-16\",\"2024-07-17\",\"2024-07-18\",\"2024-07-19\",\"2024-07-20\",\"2024-07-21\",\"2024-07-22\",\"2024-07-23\",\"2024-07-24\",\"2024-07-25\",\"2024-07-26\",\"2024-07-27\",\"2024-07-28\",\"2024-07-29\",\"2024-07-30\",\"2024-07-31\",\"2024-08-01\",\"2024-08-02\",\"2024-08-03\",\"2024-08-04\",\"2024-08-05\",\"2024-08-06\",\"2024-08-07\",\"2024-08-08\",\"2024-08-09\",\"2024-08-10\",\"2024-08-11\",\"2024-08-12\",\"2024-08-13\",\"2024-08-14\",\"2024-08-15\",\"2024-08-16\",\"2024-08-17\",\"2024-08-18\",\"2024-08-19\",\"2024-08-20\",\"2024-08-21\",\"2024-08-22\",\"2024-08-23\",\"2024-08-24\",\"2024-08-25\",\"2024-08-26\",\"2024-08-27\",\"2024-08-28\",\"2024-08-29\",\"2024-08-30\",\"2024-08-31\",\"2024-09-01\",\"2024-09-02\",\"2024-09-03\",\"2024-09-04\",\"2024-09-05\",\"2024-09-06\",\"2024-09-07\",\"2024-09-08\",\"2024-09-09\",\"2024-09-10\",\"2024-09-11\",\"2024-09-12\",\"2024-09-13\",\"2024-09-14\",\"2024-09-15\",\"2024-09-16\",\"2024-09-17\",\"2024-09-18\",\"2024-09-19\",\"2024-09-20\",\"2024-09-21\",\"2024-09-22\",\"2024-09-23\",\"2024-09-24\",\"2024-09-25\",\"2024-09-26\",\"2024-09-27\",\"2024-09-28\",\"2024-09-29\",\"2024-09-30\",\"2024-10-01\",\"2024-10-02\",\"2024-10-03\",\"2024-10-04\",\"2024-10-05\",\"2024-10-06\",\"2024-10-07\",\"2024-10-08\",\"2024-10-09\",\"2024-10-10\"],\"y\":[163.56086601838882,162.79526559986948,160.62633821777771,166.2828179234546,169.05714001256845,164.69069179872173,164.15895840312874,160.74417560933708,163.8785666214979,166.95251650116907,167.96864443313095,169.7784385725949,166.86970008437945,158.8512406320873,164.16952605560382,164.9645468285931,165.52007611033352,171.2566624392465,168.48912518006063,167.61478171598736,169.35983830065015,161.85580876977113,167.7339444551847,170.7098219175207,172.70214551879215,172.44218991127167,167.5081850427494,169.49725662467526,170.81601866496104,166.9121006338834,173.61551025211836,174.47220503283606,170.34498964831374,174.31196157311922,167.64989168128915,171.13478507749988,168.66289966776728,172.47972807627153,176.88629948592842,174.9296664853027,173.61115252095195,175.37636351136325,170.34883371500854,172.21996084690974,174.87903147074618,178.72423136961132,176.368475012855,176.34669836394042,172.31099906709863,172.92449197574322,173.98715804620696,175.8576702287554,180.42583140784728,176.58476125889447,176.7047167642029,176.629453753223,176.79218747506363,178.98892788841792,177.27576958430805,181.3722848842412,187.98498406659837,181.93843359268575,177.26104108168482,176.52071108589715,182.49155711926113,182.7631132439838,183.58903098425242,180.55611831951288,183.15960821906717,178.32795343866115,177.95677288231144,180.1783980921645,184.46072184982057,187.37985488830066,186.89181732454625,184.35605298520173,183.20591329747046,184.03454324915072,181.23482659114984,185.28308403112777,189.16027653598744,187.76079912385035,182.08918672692894,184.05516527220698,184.1045988444697,184.09811473061555,188.2742807332597,186.25346225897098,192.35640940475344,190.37176512527853,187.43031835514148,182.06941635191063,186.01022274686642,187.17014109163384,190.4715469377903,188.81181353369956,189.8358369732768,182.72228805707425,184.8050781012489,186.1383816943866,193.24578602672716,200.8065288227123,194.28828736467864,193.81482901672726,186.72836160600852,192.241076586169,186.92458582777633,190.33443214970427,193.64506108926318,193.4757070383109,198.07475768687019,190.63529094258791,193.85634688845957,192.40378033432864,196.09341230051135,201.75862491627552,199.28915953937863,199.50299860641857,194.7798744390873,192.6930896572654,194.52637761978423,199.57456586568253,202.71386899811918,198.19611966729394,200.0456645214347,195.49316233983916,195.72048739434462,194.71501535156486,196.37833826643944,203.62305490743253,200.7344682108663,199.03073803795746,198.75534186127825,203.32067022458855,195.7720635168707,199.90835707341148,204.96448344220323,205.10244268495572,202.35776136571215,200.726934794215,197.88676766309004,197.8331493539575,205.6379566001647,206.51554360133147,208.94250447638012,205.51340176751128,206.3942296531184,203.44377183130763,200.8913024543273,205.62054818185584,211.9284716425901,207.6637646546761,203.98172086654597,205.98265147159327,206.1726349573664,203.31453698455744,205.43008523836997,212.2256785051501,209.77312512015135,207.69076004023844,208.31418445663164,204.4288684167982,203.99818430544525,214.42118465046963,214.13421924970663,214.53706699286772,211.12539177908815,207.25760043859512,208.31378923543937,207.7581937625402,214.97721481304055,215.82559269066624,213.22045170391348,212.9203615631113,211.56979973711722,209.2304924943715,210.8322586252358,213.60859894025384,220.67558573410312,216.84398932313584,215.89993900588635,216.45877009417683,213.16139769783862,215.05231583040515,215.954379049422,219.8863913607121,221.40837309573277,217.5060143886973,216.20635661797888,219.67830079741876,216.03256328613747,222.7518617598126,222.93957260134334,222.69296925643752,220.52807673653177,214.8152945971805,219.35996162312384,221.26001791010955,218.5966286798421,222.4664943618798,226.01177746899668,223.89189649839983,221.62040913816824,219.26981377152651,221.30482893772452,222.7117654398928,227.80259963930465,230.42057232160838,226.3480202118702,229.0593694926144,225.05228201940673,224.81129905145923,226.84505396946966,231.7624993233332,233.2887738291909,229.0733090765045,225.81086564333862,226.00276808443675,228.32474955468726,229.3019678912529,235.83858171825764,232.99348149446334,232.08335190766633,227.74182005634702,230.45728875759843,230.67404287160272,229.50814271758875,235.7183822341356,236.40047526852823,232.37312873631768,229.2665617236331,226.68031718732917,229.53103729372697,235.63428167338503,237.80494900850638,240.0920971426893,236.7010916874573,235.4248363162822,237.30566746063883,233.13723379710953,236.5552008679365,239.89686700763409,244.9096036490923,237.26318021880311,235.2203128056023,238.47423964894884,235.15828619761484,239.34193278382634,245.16830414171588,245.73763745924688,239.48570918449084,237.76168743702013,238.21362507195306,238.1475996854584,239.53858588667305,248.9774585364927,248.371811218992,245.05503515893355,244.30023728122958,238.7489127496332,241.2890314887515,242.5035277430811,246.91925523513214,250.1697529213732,243.92664659060236,241.8478666883301,243.15442110486245,243.03602537544754,250.7844359634038,247.037719026462,253.66781574755956,249.45737058671747,246.67934201851935,247.86070849917633,250.3169519278247,251.90852670701057,255.46142564631478,255.24893567654163,248.99207503735315,250.06270940919183,249.8407640775357,249.98975359877406,249.84797441794748,260.09602432030164,255.2363489414685,253.8196170089542,252.8605047866715,250.12606585374448,250.4457385620164,255.66439628976198,257.1171366234853,260.4710266034294,254.62556673608796,258.0696214821964,251.63112941660282,256.03085174241767,255.42251780187377,262.49500527817486,268.4467462262814,261.95700243573685,254.1624803442787,256.59757033589017,257.0843143306484,263.4198589511652,268.42370186112487,265.6489292266733,262.7603675778577,262.09599969589374,261.59074479691736,262.8833387310333,261.87369991629896,268.2750282337539,265.80525498527817,265.89343025447374,262.25532718686435,262.1655981693268,265.34562193498107,268.6434338772699,273.7823312829554,270.3030635434866,270.5256404061442,264.3041896863698,268.31052865759534,267.1083365462491,275.6046633534177,273.41815843929714,275.1969887391214,270.0982463826942,272.6707120503058,268.1608009890992,269.16929371013543,268.83807050408825,276.3559986944574,273.13305737052735,273.17528890696093,271.90337524307506,272.3212925446248,273.99755602119666,276.54823895569723,282.9140012130516,278.0587207279706,277.2388898466025,275.90443193311097,278.40900456393456,273.8906911572586,278.6621422987277,282.5506791811139,282.8549333842059,281.0861352461792,279.4443667919478,277.28255778975034,278.9371783350688,282.6453102959653,290.7186568347336,284.87379057132296,283.58052655058395,279.9218473059673,285.2645998915625,281.0675810948122,285.71718834150687,287.48384144082,288.27263719907677,286.19892556555106,283.3883206932136],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Prophet Forecast with Uncertainty Interval\"},\"xaxis\":{\"title\":{\"text\":\"Date\"}},\"yaxis\":{\"title\":{\"text\":\"Predicted Value\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('77715f9c-a362-477f-905a-e1938872257e');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a Plotly line chart for the forecast data\n",
    "fig = go.Figure()\n",
    "\n",
    "# Add the predictions\n",
    "fig.add_trace(go.Scatter(x=forecast_table['Date'], y=forecast_table['Predicted Value'], mode='lines', line=dict(color='green'), name='Predicted Value'))\n",
    "\n",
    "# Add shaded areas for the uncertainty interval\n",
    "fig.add_trace(go.Scatter(x=forecast_table['Date'], y=forecast_table['Predicted Value Lower'], fill=None, mode='lines', line=dict(color='lightgray'), name='Uncertainty Interval Lower'))\n",
    "fig.add_trace(go.Scatter(x=forecast_table['Date'], y=forecast_table['Predicted Value Higher'], fill='tonexty', mode='lines', line=dict(color='lightgray'), name='Uncertainty Interval Higher'))\n",
    "\n",
    "# Customize the layout\n",
    "fig.update_layout(\n",
    "    title='Prophet Forecast with Uncertainty Interval',\n",
    "    xaxis_title='Date',\n",
    "    yaxis_title='Predicted Value',\n",
    "    template='plotly_white' \n",
    ")\n",
    "\n",
    "# Specify the file path and format for saving the image\n",
    "plt.savefig('predictions_plotly.png')\n",
    "\n",
    "# Show the Plotly graph\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "3c9fa9ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Energy Price Prediction for Three Months:\n",
      "Prediction: €138.967 (€/MWh)\n",
      "Lower Prediction Estimate: €92.396 (€/MWh)\n",
      "Upper Prediction Estimate: €182.069 (€/MWh)\n",
      "----------------------------------------\n",
      "Energy Price Prediction for Six Months:\n",
      "Prediction: €163.191 (€/MWh)\n",
      "Lower Prediction Estimate: €111.676 (€/MWh)\n",
      "Upper Prediction Estimate: €213.161 (€/MWh)\n",
      "----------------------------------------\n",
      "Energy Price Prediction for Nine Months:\n",
      "Prediction: €187.416 (€/MWh)\n",
      "Lower Prediction Estimate: €122.584 (€/MWh)\n",
      "Upper Prediction Estimate: €247.861 (€/MWh)\n",
      "----------------------------------------\n",
      "Energy Price Prediction for Twelve Months:\n",
      "Prediction: €211.98 (€/MWh)\n",
      "Lower Prediction Estimate: €137.437 (€/MWh)\n",
      "Upper Prediction Estimate: €283.388 (€/MWh)\n"
     ]
    }
   ],
   "source": [
    "# Define the date ranges for three months, six months, nine months, and twelve months\n",
    "from_date_3_months = '2024-01-12'\n",
    "from_date_6_months = '2024-04-12'\n",
    "from_date_9_months = '2024-07-12'\n",
    "from_date_12_months = '2024-10-10'\n",
    "\n",
    "# Filter the rows based on date ranges\n",
    "forecast_3_months = forecast_table[(forecast_table['Date'] == from_date_3_months)]\n",
    "forecast_6_months = forecast_table[(forecast_table['Date'] == from_date_6_months)]\n",
    "forecast_9_months = forecast_table[(forecast_table['Date'] == from_date_9_months)]\n",
    "forecast_12_months = forecast_table[(forecast_table['Date'] == from_date_12_months)]\n",
    "\n",
    "# Display the filtered tables\n",
    "print(\"Energy Price Prediction for Three Months:\")\n",
    "print(f'Prediction: €{round(forecast_3_months[\"Predicted Value\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Lower Prediction Estimate: €{round(forecast_3_months[\"Predicted Value Lower\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Upper Prediction Estimate: €{round(forecast_3_months[\"Predicted Value Higher\"].values[0], 3)} (€/MWh)')\n",
    "print(\"----------------------------------------\")\n",
    "print(\"Energy Price Prediction for Six Months:\")\n",
    "print(f'Prediction: €{round(forecast_6_months[\"Predicted Value\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Lower Prediction Estimate: €{round(forecast_6_months[\"Predicted Value Lower\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Upper Prediction Estimate: €{round(forecast_6_months[\"Predicted Value Higher\"].values[0], 3)} (€/MWh)')\n",
    "print(\"----------------------------------------\")\n",
    "print(\"Energy Price Prediction for Nine Months:\")\n",
    "print(f'Prediction: €{round(forecast_9_months[\"Predicted Value\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Lower Prediction Estimate: €{round(forecast_9_months[\"Predicted Value Lower\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Upper Prediction Estimate: €{round(forecast_9_months[\"Predicted Value Higher\"].values[0], 3)} (€/MWh)')\n",
    "print(\"----------------------------------------\")\n",
    "print(\"Energy Price Prediction for Twelve Months:\")\n",
    "print(f'Prediction: €{round(forecast_12_months[\"Predicted Value\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Lower Prediction Estimate: €{round(forecast_12_months[\"Predicted Value Lower\"].values[0], 3)} (€/MWh)')\n",
    "print(f'Upper Prediction Estimate: €{round(forecast_12_months[\"Predicted Value Higher\"].values[0], 3)} (€/MWh)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb79101",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2dc1ed59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
